//*
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//*
// These .proto interfaces are private and unstable.
// Please see http://wiki.apache.org/hadoop/Compatibility
// for what changes are allowed for a *unstable* .proto interface.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.15.6
// source: OmClientProtocol.proto

package ozone

import (
	common "github.com/apache/ozone-go/api/proto/common"
	hdds "github.com/apache/ozone-go/api/proto/hdds"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Type int32

const (
	Type_CreateVolume             Type = 11
	Type_SetVolumeProperty        Type = 12
	Type_CheckVolumeAccess        Type = 13
	Type_InfoVolume               Type = 14
	Type_DeleteVolume             Type = 15
	Type_ListVolume               Type = 16
	Type_CreateBucket             Type = 21
	Type_InfoBucket               Type = 22
	Type_SetBucketProperty        Type = 23
	Type_DeleteBucket             Type = 24
	Type_ListBuckets              Type = 25
	Type_CreateKey                Type = 31
	Type_LookupKey                Type = 32
	Type_RenameKey                Type = 33
	Type_DeleteKey                Type = 34
	Type_ListKeys                 Type = 35
	Type_CommitKey                Type = 36
	Type_AllocateBlock            Type = 37
	Type_DeleteKeys               Type = 38
	Type_InitiateMultiPartUpload  Type = 45
	Type_CommitMultiPartUpload    Type = 46
	Type_CompleteMultiPartUpload  Type = 47
	Type_AbortMultiPartUpload     Type = 48
	Type_GetS3Secret              Type = 49
	Type_ListMultiPartUploadParts Type = 50
	Type_ServiceList              Type = 51
	Type_DBUpdates                Type = 53
	Type_GetDelegationToken       Type = 61
	Type_RenewDelegationToken     Type = 62
	Type_CancelDelegationToken    Type = 63
	Type_GetFileStatus            Type = 70
	Type_CreateDirectory          Type = 71
	Type_CreateFile               Type = 72
	Type_LookupFile               Type = 73
	Type_ListStatus               Type = 74
	Type_AddAcl                   Type = 75
	Type_RemoveAcl                Type = 76
	Type_SetAcl                   Type = 77
	Type_GetAcl                   Type = 78
	Type_PurgeKeys                Type = 81
	Type_ListMultipartUploads     Type = 82
	Type_ListTrash                Type = 91
	Type_RecoverTrash             Type = 92
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		11: "CreateVolume",
		12: "SetVolumeProperty",
		13: "CheckVolumeAccess",
		14: "InfoVolume",
		15: "DeleteVolume",
		16: "ListVolume",
		21: "CreateBucket",
		22: "InfoBucket",
		23: "SetBucketProperty",
		24: "DeleteBucket",
		25: "ListBuckets",
		31: "CreateKey",
		32: "LookupKey",
		33: "RenameKey",
		34: "DeleteKey",
		35: "ListKeys",
		36: "CommitKey",
		37: "AllocateBlock",
		38: "DeleteKeys",
		45: "InitiateMultiPartUpload",
		46: "CommitMultiPartUpload",
		47: "CompleteMultiPartUpload",
		48: "AbortMultiPartUpload",
		49: "GetS3Secret",
		50: "ListMultiPartUploadParts",
		51: "ServiceList",
		53: "DBUpdates",
		61: "GetDelegationToken",
		62: "RenewDelegationToken",
		63: "CancelDelegationToken",
		70: "GetFileStatus",
		71: "CreateDirectory",
		72: "CreateFile",
		73: "LookupFile",
		74: "ListStatus",
		75: "AddAcl",
		76: "RemoveAcl",
		77: "SetAcl",
		78: "GetAcl",
		81: "PurgeKeys",
		82: "ListMultipartUploads",
		91: "ListTrash",
		92: "RecoverTrash",
	}
	Type_value = map[string]int32{
		"CreateVolume":             11,
		"SetVolumeProperty":        12,
		"CheckVolumeAccess":        13,
		"InfoVolume":               14,
		"DeleteVolume":             15,
		"ListVolume":               16,
		"CreateBucket":             21,
		"InfoBucket":               22,
		"SetBucketProperty":        23,
		"DeleteBucket":             24,
		"ListBuckets":              25,
		"CreateKey":                31,
		"LookupKey":                32,
		"RenameKey":                33,
		"DeleteKey":                34,
		"ListKeys":                 35,
		"CommitKey":                36,
		"AllocateBlock":            37,
		"DeleteKeys":               38,
		"InitiateMultiPartUpload":  45,
		"CommitMultiPartUpload":    46,
		"CompleteMultiPartUpload":  47,
		"AbortMultiPartUpload":     48,
		"GetS3Secret":              49,
		"ListMultiPartUploadParts": 50,
		"ServiceList":              51,
		"DBUpdates":                53,
		"GetDelegationToken":       61,
		"RenewDelegationToken":     62,
		"CancelDelegationToken":    63,
		"GetFileStatus":            70,
		"CreateDirectory":          71,
		"CreateFile":               72,
		"LookupFile":               73,
		"ListStatus":               74,
		"AddAcl":                   75,
		"RemoveAcl":                76,
		"SetAcl":                   77,
		"GetAcl":                   78,
		"PurgeKeys":                81,
		"ListMultipartUploads":     82,
		"ListTrash":                91,
		"RecoverTrash":             92,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Type(num)
	return nil
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{0}
}

type Status int32

const (
	Status_OK                                 Status = 1
	Status_VOLUME_NOT_UNIQUE                  Status = 2
	Status_VOLUME_NOT_FOUND                   Status = 3
	Status_VOLUME_NOT_EMPTY                   Status = 4
	Status_VOLUME_ALREADY_EXISTS              Status = 5
	Status_USER_NOT_FOUND                     Status = 6
	Status_USER_TOO_MANY_VOLUMES              Status = 7
	Status_BUCKET_NOT_FOUND                   Status = 8
	Status_BUCKET_NOT_EMPTY                   Status = 9
	Status_BUCKET_ALREADY_EXISTS              Status = 10
	Status_KEY_ALREADY_EXISTS                 Status = 11
	Status_KEY_NOT_FOUND                      Status = 12
	Status_INVALID_KEY_NAME                   Status = 13
	Status_ACCESS_DENIED                      Status = 14
	Status_INTERNAL_ERROR                     Status = 15
	Status_KEY_ALLOCATION_ERROR               Status = 16
	Status_KEY_DELETION_ERROR                 Status = 17
	Status_KEY_RENAME_ERROR                   Status = 18
	Status_METADATA_ERROR                     Status = 19
	Status_OM_NOT_INITIALIZED                 Status = 20
	Status_SCM_VERSION_MISMATCH_ERROR         Status = 21
	Status_INITIATE_MULTIPART_UPLOAD_ERROR    Status = 24
	Status_MULTIPART_UPLOAD_PARTFILE_ERROR    Status = 25
	Status_NO_SUCH_MULTIPART_UPLOAD_ERROR     Status = 26
	Status_MISMATCH_MULTIPART_LIST            Status = 27
	Status_MISSING_UPLOAD_PARTS               Status = 28
	Status_COMPLETE_MULTIPART_UPLOAD_ERROR    Status = 29
	Status_ENTITY_TOO_SMALL                   Status = 30
	Status_ABORT_MULTIPART_UPLOAD_FAILED      Status = 31
	Status_S3_SECRET_NOT_FOUND                Status = 32
	Status_INVALID_AUTH_METHOD                Status = 33
	Status_INVALID_TOKEN                      Status = 34
	Status_TOKEN_EXPIRED                      Status = 35
	Status_TOKEN_ERROR_OTHER                  Status = 36
	Status_LIST_MULTIPART_UPLOAD_PARTS_FAILED Status = 37
	Status_SCM_IN_SAFE_MODE                   Status = 38
	Status_INVALID_REQUEST                    Status = 39
	Status_BUCKET_ENCRYPTION_KEY_NOT_FOUND    Status = 40
	Status_UNKNOWN_CIPHER_SUITE               Status = 41
	Status_INVALID_KMS_PROVIDER               Status = 42
	Status_TOKEN_CREATION_ERROR               Status = 43
	Status_FILE_NOT_FOUND                     Status = 44
	Status_DIRECTORY_NOT_FOUND                Status = 45
	Status_FILE_ALREADY_EXISTS                Status = 46
	Status_NOT_A_FILE                         Status = 47
	Status_PERMISSION_DENIED                  Status = 48
	Status_TIMEOUT                            Status = 49
	Status_PREFIX_NOT_FOUND                   Status = 50
	Status_RATIS_ERROR                        Status = 52
	Status_INVALID_PATH_IN_ACL_REQUEST        Status = 53 // Invalid path name in acl request.
	Status_USER_MISMATCH                      Status = 54 // Error code when requested user name passed is
	Status_INVALID_PART                       Status = 55
	Status_INVALID_PART_ORDER                 Status = 56
	Status_SCM_GET_PIPELINE_EXCEPTION         Status = 57
	Status_INVALID_BUCKET_NAME                Status = 58
	Status_CANNOT_CREATE_DIRECTORY_AT_ROOT    Status = 59
	Status_DIRECTORY_ALREADY_EXISTS           Status = 60
	Status_INVALID_VOLUME_NAME                Status = 61
	Status_PARTIAL_DELETE                     Status = 62
	Status_DETECTED_LOOP_IN_BUCKET_LINKS      Status = 63
	Status_NOT_SUPPORTED_OPERATION            Status = 64
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		1:  "OK",
		2:  "VOLUME_NOT_UNIQUE",
		3:  "VOLUME_NOT_FOUND",
		4:  "VOLUME_NOT_EMPTY",
		5:  "VOLUME_ALREADY_EXISTS",
		6:  "USER_NOT_FOUND",
		7:  "USER_TOO_MANY_VOLUMES",
		8:  "BUCKET_NOT_FOUND",
		9:  "BUCKET_NOT_EMPTY",
		10: "BUCKET_ALREADY_EXISTS",
		11: "KEY_ALREADY_EXISTS",
		12: "KEY_NOT_FOUND",
		13: "INVALID_KEY_NAME",
		14: "ACCESS_DENIED",
		15: "INTERNAL_ERROR",
		16: "KEY_ALLOCATION_ERROR",
		17: "KEY_DELETION_ERROR",
		18: "KEY_RENAME_ERROR",
		19: "METADATA_ERROR",
		20: "OM_NOT_INITIALIZED",
		21: "SCM_VERSION_MISMATCH_ERROR",
		24: "INITIATE_MULTIPART_UPLOAD_ERROR",
		25: "MULTIPART_UPLOAD_PARTFILE_ERROR",
		26: "NO_SUCH_MULTIPART_UPLOAD_ERROR",
		27: "MISMATCH_MULTIPART_LIST",
		28: "MISSING_UPLOAD_PARTS",
		29: "COMPLETE_MULTIPART_UPLOAD_ERROR",
		30: "ENTITY_TOO_SMALL",
		31: "ABORT_MULTIPART_UPLOAD_FAILED",
		32: "S3_SECRET_NOT_FOUND",
		33: "INVALID_AUTH_METHOD",
		34: "INVALID_TOKEN",
		35: "TOKEN_EXPIRED",
		36: "TOKEN_ERROR_OTHER",
		37: "LIST_MULTIPART_UPLOAD_PARTS_FAILED",
		38: "SCM_IN_SAFE_MODE",
		39: "INVALID_REQUEST",
		40: "BUCKET_ENCRYPTION_KEY_NOT_FOUND",
		41: "UNKNOWN_CIPHER_SUITE",
		42: "INVALID_KMS_PROVIDER",
		43: "TOKEN_CREATION_ERROR",
		44: "FILE_NOT_FOUND",
		45: "DIRECTORY_NOT_FOUND",
		46: "FILE_ALREADY_EXISTS",
		47: "NOT_A_FILE",
		48: "PERMISSION_DENIED",
		49: "TIMEOUT",
		50: "PREFIX_NOT_FOUND",
		52: "RATIS_ERROR",
		53: "INVALID_PATH_IN_ACL_REQUEST",
		54: "USER_MISMATCH",
		55: "INVALID_PART",
		56: "INVALID_PART_ORDER",
		57: "SCM_GET_PIPELINE_EXCEPTION",
		58: "INVALID_BUCKET_NAME",
		59: "CANNOT_CREATE_DIRECTORY_AT_ROOT",
		60: "DIRECTORY_ALREADY_EXISTS",
		61: "INVALID_VOLUME_NAME",
		62: "PARTIAL_DELETE",
		63: "DETECTED_LOOP_IN_BUCKET_LINKS",
		64: "NOT_SUPPORTED_OPERATION",
	}
	Status_value = map[string]int32{
		"OK":                                 1,
		"VOLUME_NOT_UNIQUE":                  2,
		"VOLUME_NOT_FOUND":                   3,
		"VOLUME_NOT_EMPTY":                   4,
		"VOLUME_ALREADY_EXISTS":              5,
		"USER_NOT_FOUND":                     6,
		"USER_TOO_MANY_VOLUMES":              7,
		"BUCKET_NOT_FOUND":                   8,
		"BUCKET_NOT_EMPTY":                   9,
		"BUCKET_ALREADY_EXISTS":              10,
		"KEY_ALREADY_EXISTS":                 11,
		"KEY_NOT_FOUND":                      12,
		"INVALID_KEY_NAME":                   13,
		"ACCESS_DENIED":                      14,
		"INTERNAL_ERROR":                     15,
		"KEY_ALLOCATION_ERROR":               16,
		"KEY_DELETION_ERROR":                 17,
		"KEY_RENAME_ERROR":                   18,
		"METADATA_ERROR":                     19,
		"OM_NOT_INITIALIZED":                 20,
		"SCM_VERSION_MISMATCH_ERROR":         21,
		"INITIATE_MULTIPART_UPLOAD_ERROR":    24,
		"MULTIPART_UPLOAD_PARTFILE_ERROR":    25,
		"NO_SUCH_MULTIPART_UPLOAD_ERROR":     26,
		"MISMATCH_MULTIPART_LIST":            27,
		"MISSING_UPLOAD_PARTS":               28,
		"COMPLETE_MULTIPART_UPLOAD_ERROR":    29,
		"ENTITY_TOO_SMALL":                   30,
		"ABORT_MULTIPART_UPLOAD_FAILED":      31,
		"S3_SECRET_NOT_FOUND":                32,
		"INVALID_AUTH_METHOD":                33,
		"INVALID_TOKEN":                      34,
		"TOKEN_EXPIRED":                      35,
		"TOKEN_ERROR_OTHER":                  36,
		"LIST_MULTIPART_UPLOAD_PARTS_FAILED": 37,
		"SCM_IN_SAFE_MODE":                   38,
		"INVALID_REQUEST":                    39,
		"BUCKET_ENCRYPTION_KEY_NOT_FOUND":    40,
		"UNKNOWN_CIPHER_SUITE":               41,
		"INVALID_KMS_PROVIDER":               42,
		"TOKEN_CREATION_ERROR":               43,
		"FILE_NOT_FOUND":                     44,
		"DIRECTORY_NOT_FOUND":                45,
		"FILE_ALREADY_EXISTS":                46,
		"NOT_A_FILE":                         47,
		"PERMISSION_DENIED":                  48,
		"TIMEOUT":                            49,
		"PREFIX_NOT_FOUND":                   50,
		"RATIS_ERROR":                        52,
		"INVALID_PATH_IN_ACL_REQUEST":        53,
		"USER_MISMATCH":                      54,
		"INVALID_PART":                       55,
		"INVALID_PART_ORDER":                 56,
		"SCM_GET_PIPELINE_EXCEPTION":         57,
		"INVALID_BUCKET_NAME":                58,
		"CANNOT_CREATE_DIRECTORY_AT_ROOT":    59,
		"DIRECTORY_ALREADY_EXISTS":           60,
		"INVALID_VOLUME_NAME":                61,
		"PARTIAL_DELETE":                     62,
		"DETECTED_LOOP_IN_BUCKET_LINKS":      63,
		"NOT_SUPPORTED_OPERATION":            64,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Status(num)
	return nil
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{1}
}

type StorageTypeProto int32

const (
	StorageTypeProto_DISK     StorageTypeProto = 1
	StorageTypeProto_SSD      StorageTypeProto = 2
	StorageTypeProto_ARCHIVE  StorageTypeProto = 3
	StorageTypeProto_RAM_DISK StorageTypeProto = 4
)

// Enum value maps for StorageTypeProto.
var (
	StorageTypeProto_name = map[int32]string{
		1: "DISK",
		2: "SSD",
		3: "ARCHIVE",
		4: "RAM_DISK",
	}
	StorageTypeProto_value = map[string]int32{
		"DISK":     1,
		"SSD":      2,
		"ARCHIVE":  3,
		"RAM_DISK": 4,
	}
)

func (x StorageTypeProto) Enum() *StorageTypeProto {
	p := new(StorageTypeProto)
	*p = x
	return p
}

func (x StorageTypeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageTypeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[2].Descriptor()
}

func (StorageTypeProto) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[2]
}

func (x StorageTypeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StorageTypeProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StorageTypeProto(num)
	return nil
}

// Deprecated: Use StorageTypeProto.Descriptor instead.
func (StorageTypeProto) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{2}
}

//*
// Cipher suite.
type CipherSuiteProto int32

const (
	CipherSuiteProto_UNKNOWN           CipherSuiteProto = 1
	CipherSuiteProto_AES_CTR_NOPADDING CipherSuiteProto = 2
)

// Enum value maps for CipherSuiteProto.
var (
	CipherSuiteProto_name = map[int32]string{
		1: "UNKNOWN",
		2: "AES_CTR_NOPADDING",
	}
	CipherSuiteProto_value = map[string]int32{
		"UNKNOWN":           1,
		"AES_CTR_NOPADDING": 2,
	}
)

func (x CipherSuiteProto) Enum() *CipherSuiteProto {
	p := new(CipherSuiteProto)
	*p = x
	return p
}

func (x CipherSuiteProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CipherSuiteProto) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[3].Descriptor()
}

func (CipherSuiteProto) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[3]
}

func (x CipherSuiteProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CipherSuiteProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CipherSuiteProto(num)
	return nil
}

// Deprecated: Use CipherSuiteProto.Descriptor instead.
func (CipherSuiteProto) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{3}
}

//*
// Crypto protocol version used to access encrypted files.
type CryptoProtocolVersionProto int32

const (
	CryptoProtocolVersionProto_UNKNOWN_PROTOCOL_VERSION CryptoProtocolVersionProto = 1
	CryptoProtocolVersionProto_ENCRYPTION_ZONES         CryptoProtocolVersionProto = 2
)

// Enum value maps for CryptoProtocolVersionProto.
var (
	CryptoProtocolVersionProto_name = map[int32]string{
		1: "UNKNOWN_PROTOCOL_VERSION",
		2: "ENCRYPTION_ZONES",
	}
	CryptoProtocolVersionProto_value = map[string]int32{
		"UNKNOWN_PROTOCOL_VERSION": 1,
		"ENCRYPTION_ZONES":         2,
	}
)

func (x CryptoProtocolVersionProto) Enum() *CryptoProtocolVersionProto {
	p := new(CryptoProtocolVersionProto)
	*p = x
	return p
}

func (x CryptoProtocolVersionProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoProtocolVersionProto) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[4].Descriptor()
}

func (CryptoProtocolVersionProto) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[4]
}

func (x CryptoProtocolVersionProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CryptoProtocolVersionProto) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CryptoProtocolVersionProto(num)
	return nil
}

// Deprecated: Use CryptoProtocolVersionProto.Descriptor instead.
func (CryptoProtocolVersionProto) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{4}
}

type ListVolumeRequest_Scope int32

const (
	ListVolumeRequest_USER_VOLUMES       ListVolumeRequest_Scope = 1 // User volumes -- called by user
	ListVolumeRequest_VOLUMES_BY_USER    ListVolumeRequest_Scope = 2 // User volumes - called by Admin
	ListVolumeRequest_VOLUMES_BY_CLUSTER ListVolumeRequest_Scope = 3 // All volumes in the cluster
)

// Enum value maps for ListVolumeRequest_Scope.
var (
	ListVolumeRequest_Scope_name = map[int32]string{
		1: "USER_VOLUMES",
		2: "VOLUMES_BY_USER",
		3: "VOLUMES_BY_CLUSTER",
	}
	ListVolumeRequest_Scope_value = map[string]int32{
		"USER_VOLUMES":       1,
		"VOLUMES_BY_USER":    2,
		"VOLUMES_BY_CLUSTER": 3,
	}
)

func (x ListVolumeRequest_Scope) Enum() *ListVolumeRequest_Scope {
	p := new(ListVolumeRequest_Scope)
	*p = x
	return p
}

func (x ListVolumeRequest_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListVolumeRequest_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[5].Descriptor()
}

func (ListVolumeRequest_Scope) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[5]
}

func (x ListVolumeRequest_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ListVolumeRequest_Scope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ListVolumeRequest_Scope(num)
	return nil
}

// Deprecated: Use ListVolumeRequest_Scope.Descriptor instead.
func (ListVolumeRequest_Scope) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{21, 0}
}

type OzoneObj_ObjectType int32

const (
	OzoneObj_VOLUME OzoneObj_ObjectType = 1
	OzoneObj_BUCKET OzoneObj_ObjectType = 2
	OzoneObj_KEY    OzoneObj_ObjectType = 3
	OzoneObj_PREFIX OzoneObj_ObjectType = 4
)

// Enum value maps for OzoneObj_ObjectType.
var (
	OzoneObj_ObjectType_name = map[int32]string{
		1: "VOLUME",
		2: "BUCKET",
		3: "KEY",
		4: "PREFIX",
	}
	OzoneObj_ObjectType_value = map[string]int32{
		"VOLUME": 1,
		"BUCKET": 2,
		"KEY":    3,
		"PREFIX": 4,
	}
)

func (x OzoneObj_ObjectType) Enum() *OzoneObj_ObjectType {
	p := new(OzoneObj_ObjectType)
	*p = x
	return p
}

func (x OzoneObj_ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OzoneObj_ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[6].Descriptor()
}

func (OzoneObj_ObjectType) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[6]
}

func (x OzoneObj_ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OzoneObj_ObjectType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OzoneObj_ObjectType(num)
	return nil
}

// Deprecated: Use OzoneObj_ObjectType.Descriptor instead.
func (OzoneObj_ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{30, 0}
}

type OzoneObj_StoreType int32

const (
	OzoneObj_OZONE OzoneObj_StoreType = 1
	OzoneObj_S3    OzoneObj_StoreType = 2
)

// Enum value maps for OzoneObj_StoreType.
var (
	OzoneObj_StoreType_name = map[int32]string{
		1: "OZONE",
		2: "S3",
	}
	OzoneObj_StoreType_value = map[string]int32{
		"OZONE": 1,
		"S3":    2,
	}
)

func (x OzoneObj_StoreType) Enum() *OzoneObj_StoreType {
	p := new(OzoneObj_StoreType)
	*p = x
	return p
}

func (x OzoneObj_StoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OzoneObj_StoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[7].Descriptor()
}

func (OzoneObj_StoreType) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[7]
}

func (x OzoneObj_StoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OzoneObj_StoreType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OzoneObj_StoreType(num)
	return nil
}

// Deprecated: Use OzoneObj_StoreType.Descriptor instead.
func (OzoneObj_StoreType) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{30, 1}
}

type OzoneAclInfo_OzoneAclType int32

const (
	OzoneAclInfo_USER      OzoneAclInfo_OzoneAclType = 1
	OzoneAclInfo_GROUP     OzoneAclInfo_OzoneAclType = 2
	OzoneAclInfo_WORLD     OzoneAclInfo_OzoneAclType = 3
	OzoneAclInfo_ANONYMOUS OzoneAclInfo_OzoneAclType = 4
	OzoneAclInfo_CLIENT_IP OzoneAclInfo_OzoneAclType = 5
)

// Enum value maps for OzoneAclInfo_OzoneAclType.
var (
	OzoneAclInfo_OzoneAclType_name = map[int32]string{
		1: "USER",
		2: "GROUP",
		3: "WORLD",
		4: "ANONYMOUS",
		5: "CLIENT_IP",
	}
	OzoneAclInfo_OzoneAclType_value = map[string]int32{
		"USER":      1,
		"GROUP":     2,
		"WORLD":     3,
		"ANONYMOUS": 4,
		"CLIENT_IP": 5,
	}
)

func (x OzoneAclInfo_OzoneAclType) Enum() *OzoneAclInfo_OzoneAclType {
	p := new(OzoneAclInfo_OzoneAclType)
	*p = x
	return p
}

func (x OzoneAclInfo_OzoneAclType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OzoneAclInfo_OzoneAclType) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[8].Descriptor()
}

func (OzoneAclInfo_OzoneAclType) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[8]
}

func (x OzoneAclInfo_OzoneAclType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OzoneAclInfo_OzoneAclType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OzoneAclInfo_OzoneAclType(num)
	return nil
}

// Deprecated: Use OzoneAclInfo_OzoneAclType.Descriptor instead.
func (OzoneAclInfo_OzoneAclType) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{31, 0}
}

type OzoneAclInfo_OzoneAclScope int32

const (
	OzoneAclInfo_ACCESS  OzoneAclInfo_OzoneAclScope = 0
	OzoneAclInfo_DEFAULT OzoneAclInfo_OzoneAclScope = 1
)

// Enum value maps for OzoneAclInfo_OzoneAclScope.
var (
	OzoneAclInfo_OzoneAclScope_name = map[int32]string{
		0: "ACCESS",
		1: "DEFAULT",
	}
	OzoneAclInfo_OzoneAclScope_value = map[string]int32{
		"ACCESS":  0,
		"DEFAULT": 1,
	}
)

func (x OzoneAclInfo_OzoneAclScope) Enum() *OzoneAclInfo_OzoneAclScope {
	p := new(OzoneAclInfo_OzoneAclScope)
	*p = x
	return p
}

func (x OzoneAclInfo_OzoneAclScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OzoneAclInfo_OzoneAclScope) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[9].Descriptor()
}

func (OzoneAclInfo_OzoneAclScope) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[9]
}

func (x OzoneAclInfo_OzoneAclScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OzoneAclInfo_OzoneAclScope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OzoneAclInfo_OzoneAclScope(num)
	return nil
}

// Deprecated: Use OzoneAclInfo_OzoneAclScope.Descriptor instead.
func (OzoneAclInfo_OzoneAclScope) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{31, 1}
}

type OMTokenProto_Type int32

const (
	OMTokenProto_DELEGATION_TOKEN OMTokenProto_Type = 1
	OMTokenProto_S3AUTHINFO       OMTokenProto_Type = 2
)

// Enum value maps for OMTokenProto_Type.
var (
	OMTokenProto_Type_name = map[int32]string{
		1: "DELEGATION_TOKEN",
		2: "S3AUTHINFO",
	}
	OMTokenProto_Type_value = map[string]int32{
		"DELEGATION_TOKEN": 1,
		"S3AUTHINFO":       2,
	}
)

func (x OMTokenProto_Type) Enum() *OMTokenProto_Type {
	p := new(OMTokenProto_Type)
	*p = x
	return p
}

func (x OMTokenProto_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OMTokenProto_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[10].Descriptor()
}

func (OMTokenProto_Type) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[10]
}

func (x OMTokenProto_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OMTokenProto_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OMTokenProto_Type(num)
	return nil
}

// Deprecated: Use OMTokenProto_Type.Descriptor instead.
func (OMTokenProto_Type) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{80, 0}
}

type ServicePort_Type int32

const (
	ServicePort_RPC   ServicePort_Type = 1
	ServicePort_HTTP  ServicePort_Type = 2
	ServicePort_HTTPS ServicePort_Type = 3
	ServicePort_RATIS ServicePort_Type = 4
)

// Enum value maps for ServicePort_Type.
var (
	ServicePort_Type_name = map[int32]string{
		1: "RPC",
		2: "HTTP",
		3: "HTTPS",
		4: "RATIS",
	}
	ServicePort_Type_value = map[string]int32{
		"RPC":   1,
		"HTTP":  2,
		"HTTPS": 3,
		"RATIS": 4,
	}
)

func (x ServicePort_Type) Enum() *ServicePort_Type {
	p := new(ServicePort_Type)
	*p = x
	return p
}

func (x ServicePort_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicePort_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_OmClientProtocol_proto_enumTypes[11].Descriptor()
}

func (ServicePort_Type) Type() protoreflect.EnumType {
	return &file_OmClientProtocol_proto_enumTypes[11]
}

func (x ServicePort_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServicePort_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServicePort_Type(num)
	return nil
}

// Deprecated: Use ServicePort_Type.Descriptor instead.
func (ServicePort_Type) EnumDescriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{92, 0}
}

type OMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdType *Type `protobuf:"varint,1,req,name=cmdType,enum=hadoop.ozone.Type" json:"cmdType,omitempty"` // Type of the command
	// A string that identifies this command, we generate  Trace ID in Ozone
	// frontend and this allows us to trace that command all over ozone.
	TraceID                            *string                                   `protobuf:"bytes,2,opt,name=traceID" json:"traceID,omitempty"`
	ClientId                           *string                                   `protobuf:"bytes,3,req,name=clientId" json:"clientId,omitempty"`
	UserInfo                           *UserInfo                                 `protobuf:"bytes,4,opt,name=userInfo" json:"userInfo,omitempty"`
	CreateVolumeRequest                *CreateVolumeRequest                      `protobuf:"bytes,11,opt,name=createVolumeRequest" json:"createVolumeRequest,omitempty"`
	SetVolumePropertyRequest           *SetVolumePropertyRequest                 `protobuf:"bytes,12,opt,name=setVolumePropertyRequest" json:"setVolumePropertyRequest,omitempty"`
	CheckVolumeAccessRequest           *CheckVolumeAccessRequest                 `protobuf:"bytes,13,opt,name=checkVolumeAccessRequest" json:"checkVolumeAccessRequest,omitempty"`
	InfoVolumeRequest                  *InfoVolumeRequest                        `protobuf:"bytes,14,opt,name=infoVolumeRequest" json:"infoVolumeRequest,omitempty"`
	DeleteVolumeRequest                *DeleteVolumeRequest                      `protobuf:"bytes,15,opt,name=deleteVolumeRequest" json:"deleteVolumeRequest,omitempty"`
	ListVolumeRequest                  *ListVolumeRequest                        `protobuf:"bytes,16,opt,name=listVolumeRequest" json:"listVolumeRequest,omitempty"`
	CreateBucketRequest                *CreateBucketRequest                      `protobuf:"bytes,21,opt,name=createBucketRequest" json:"createBucketRequest,omitempty"`
	InfoBucketRequest                  *InfoBucketRequest                        `protobuf:"bytes,22,opt,name=infoBucketRequest" json:"infoBucketRequest,omitempty"`
	SetBucketPropertyRequest           *SetBucketPropertyRequest                 `protobuf:"bytes,23,opt,name=setBucketPropertyRequest" json:"setBucketPropertyRequest,omitempty"`
	DeleteBucketRequest                *DeleteBucketRequest                      `protobuf:"bytes,24,opt,name=deleteBucketRequest" json:"deleteBucketRequest,omitempty"`
	ListBucketsRequest                 *ListBucketsRequest                       `protobuf:"bytes,25,opt,name=listBucketsRequest" json:"listBucketsRequest,omitempty"`
	CreateKeyRequest                   *CreateKeyRequest                         `protobuf:"bytes,31,opt,name=createKeyRequest" json:"createKeyRequest,omitempty"`
	LookupKeyRequest                   *LookupKeyRequest                         `protobuf:"bytes,32,opt,name=lookupKeyRequest" json:"lookupKeyRequest,omitempty"`
	RenameKeyRequest                   *RenameKeyRequest                         `protobuf:"bytes,33,opt,name=renameKeyRequest" json:"renameKeyRequest,omitempty"`
	DeleteKeyRequest                   *DeleteKeyRequest                         `protobuf:"bytes,34,opt,name=deleteKeyRequest" json:"deleteKeyRequest,omitempty"`
	ListKeysRequest                    *ListKeysRequest                          `protobuf:"bytes,35,opt,name=listKeysRequest" json:"listKeysRequest,omitempty"`
	CommitKeyRequest                   *CommitKeyRequest                         `protobuf:"bytes,36,opt,name=commitKeyRequest" json:"commitKeyRequest,omitempty"`
	AllocateBlockRequest               *AllocateBlockRequest                     `protobuf:"bytes,37,opt,name=allocateBlockRequest" json:"allocateBlockRequest,omitempty"`
	DeleteKeysRequest                  *DeleteKeysRequest                        `protobuf:"bytes,38,opt,name=deleteKeysRequest" json:"deleteKeysRequest,omitempty"`
	InitiateMultiPartUploadRequest     *MultipartInfoInitiateRequest             `protobuf:"bytes,45,opt,name=initiateMultiPartUploadRequest" json:"initiateMultiPartUploadRequest,omitempty"`
	CommitMultiPartUploadRequest       *MultipartCommitUploadPartRequest         `protobuf:"bytes,46,opt,name=commitMultiPartUploadRequest" json:"commitMultiPartUploadRequest,omitempty"`
	CompleteMultiPartUploadRequest     *MultipartUploadCompleteRequest           `protobuf:"bytes,47,opt,name=completeMultiPartUploadRequest" json:"completeMultiPartUploadRequest,omitempty"`
	AbortMultiPartUploadRequest        *MultipartUploadAbortRequest              `protobuf:"bytes,48,opt,name=abortMultiPartUploadRequest" json:"abortMultiPartUploadRequest,omitempty"`
	GetS3SecretRequest                 *GetS3SecretRequest                       `protobuf:"bytes,49,opt,name=getS3SecretRequest" json:"getS3SecretRequest,omitempty"`
	ListMultipartUploadPartsRequest    *MultipartUploadListPartsRequest          `protobuf:"bytes,50,opt,name=listMultipartUploadPartsRequest" json:"listMultipartUploadPartsRequest,omitempty"`
	ServiceListRequest                 *ServiceListRequest                       `protobuf:"bytes,51,opt,name=serviceListRequest" json:"serviceListRequest,omitempty"`
	DbUpdatesRequest                   *DBUpdatesRequest                         `protobuf:"bytes,53,opt,name=dbUpdatesRequest" json:"dbUpdatesRequest,omitempty"`
	GetDelegationTokenRequest          *common.GetDelegationTokenRequestProto    `protobuf:"bytes,61,opt,name=getDelegationTokenRequest" json:"getDelegationTokenRequest,omitempty"`
	RenewDelegationTokenRequest        *common.RenewDelegationTokenRequestProto  `protobuf:"bytes,62,opt,name=renewDelegationTokenRequest" json:"renewDelegationTokenRequest,omitempty"`
	CancelDelegationTokenRequest       *common.CancelDelegationTokenRequestProto `protobuf:"bytes,63,opt,name=cancelDelegationTokenRequest" json:"cancelDelegationTokenRequest,omitempty"`
	UpdateGetDelegationTokenRequest    *UpdateGetDelegationTokenRequest          `protobuf:"bytes,64,opt,name=updateGetDelegationTokenRequest" json:"updateGetDelegationTokenRequest,omitempty"`
	UpdatedRenewDelegationTokenRequest *UpdateRenewDelegationTokenRequest        `protobuf:"bytes,65,opt,name=updatedRenewDelegationTokenRequest" json:"updatedRenewDelegationTokenRequest,omitempty"`
	GetFileStatusRequest               *GetFileStatusRequest                     `protobuf:"bytes,70,opt,name=getFileStatusRequest" json:"getFileStatusRequest,omitempty"`
	CreateDirectoryRequest             *CreateDirectoryRequest                   `protobuf:"bytes,71,opt,name=createDirectoryRequest" json:"createDirectoryRequest,omitempty"`
	CreateFileRequest                  *CreateFileRequest                        `protobuf:"bytes,72,opt,name=createFileRequest" json:"createFileRequest,omitempty"`
	LookupFileRequest                  *LookupFileRequest                        `protobuf:"bytes,73,opt,name=lookupFileRequest" json:"lookupFileRequest,omitempty"`
	ListStatusRequest                  *ListStatusRequest                        `protobuf:"bytes,74,opt,name=listStatusRequest" json:"listStatusRequest,omitempty"`
	AddAclRequest                      *AddAclRequest                            `protobuf:"bytes,75,opt,name=addAclRequest" json:"addAclRequest,omitempty"`
	RemoveAclRequest                   *RemoveAclRequest                         `protobuf:"bytes,76,opt,name=removeAclRequest" json:"removeAclRequest,omitempty"`
	SetAclRequest                      *SetAclRequest                            `protobuf:"bytes,77,opt,name=setAclRequest" json:"setAclRequest,omitempty"`
	GetAclRequest                      *GetAclRequest                            `protobuf:"bytes,78,opt,name=getAclRequest" json:"getAclRequest,omitempty"`
	PurgeKeysRequest                   *PurgeKeysRequest                         `protobuf:"bytes,81,opt,name=purgeKeysRequest" json:"purgeKeysRequest,omitempty"`
	UpdateGetS3SecretRequest           *UpdateGetS3SecretRequest                 `protobuf:"bytes,82,opt,name=updateGetS3SecretRequest" json:"updateGetS3SecretRequest,omitempty"`
	ListMultipartUploadsRequest        *ListMultipartUploadsRequest              `protobuf:"bytes,83,opt,name=listMultipartUploadsRequest" json:"listMultipartUploadsRequest,omitempty"`
	ListTrashRequest                   *ListTrashRequest                         `protobuf:"bytes,91,opt,name=listTrashRequest" json:"listTrashRequest,omitempty"`
	RecoverTrashRequest                *RecoverTrashRequest                      `protobuf:"bytes,92,opt,name=RecoverTrashRequest" json:"RecoverTrashRequest,omitempty"`
}

func (x *OMRequest) Reset() {
	*x = OMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OMRequest) ProtoMessage() {}

func (x *OMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OMRequest.ProtoReflect.Descriptor instead.
func (*OMRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{0}
}

func (x *OMRequest) GetCmdType() Type {
	if x != nil && x.CmdType != nil {
		return *x.CmdType
	}
	return Type_CreateVolume
}

func (x *OMRequest) GetTraceID() string {
	if x != nil && x.TraceID != nil {
		return *x.TraceID
	}
	return ""
}

func (x *OMRequest) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *OMRequest) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *OMRequest) GetCreateVolumeRequest() *CreateVolumeRequest {
	if x != nil {
		return x.CreateVolumeRequest
	}
	return nil
}

func (x *OMRequest) GetSetVolumePropertyRequest() *SetVolumePropertyRequest {
	if x != nil {
		return x.SetVolumePropertyRequest
	}
	return nil
}

func (x *OMRequest) GetCheckVolumeAccessRequest() *CheckVolumeAccessRequest {
	if x != nil {
		return x.CheckVolumeAccessRequest
	}
	return nil
}

func (x *OMRequest) GetInfoVolumeRequest() *InfoVolumeRequest {
	if x != nil {
		return x.InfoVolumeRequest
	}
	return nil
}

func (x *OMRequest) GetDeleteVolumeRequest() *DeleteVolumeRequest {
	if x != nil {
		return x.DeleteVolumeRequest
	}
	return nil
}

func (x *OMRequest) GetListVolumeRequest() *ListVolumeRequest {
	if x != nil {
		return x.ListVolumeRequest
	}
	return nil
}

func (x *OMRequest) GetCreateBucketRequest() *CreateBucketRequest {
	if x != nil {
		return x.CreateBucketRequest
	}
	return nil
}

func (x *OMRequest) GetInfoBucketRequest() *InfoBucketRequest {
	if x != nil {
		return x.InfoBucketRequest
	}
	return nil
}

func (x *OMRequest) GetSetBucketPropertyRequest() *SetBucketPropertyRequest {
	if x != nil {
		return x.SetBucketPropertyRequest
	}
	return nil
}

func (x *OMRequest) GetDeleteBucketRequest() *DeleteBucketRequest {
	if x != nil {
		return x.DeleteBucketRequest
	}
	return nil
}

func (x *OMRequest) GetListBucketsRequest() *ListBucketsRequest {
	if x != nil {
		return x.ListBucketsRequest
	}
	return nil
}

func (x *OMRequest) GetCreateKeyRequest() *CreateKeyRequest {
	if x != nil {
		return x.CreateKeyRequest
	}
	return nil
}

func (x *OMRequest) GetLookupKeyRequest() *LookupKeyRequest {
	if x != nil {
		return x.LookupKeyRequest
	}
	return nil
}

func (x *OMRequest) GetRenameKeyRequest() *RenameKeyRequest {
	if x != nil {
		return x.RenameKeyRequest
	}
	return nil
}

func (x *OMRequest) GetDeleteKeyRequest() *DeleteKeyRequest {
	if x != nil {
		return x.DeleteKeyRequest
	}
	return nil
}

func (x *OMRequest) GetListKeysRequest() *ListKeysRequest {
	if x != nil {
		return x.ListKeysRequest
	}
	return nil
}

func (x *OMRequest) GetCommitKeyRequest() *CommitKeyRequest {
	if x != nil {
		return x.CommitKeyRequest
	}
	return nil
}

func (x *OMRequest) GetAllocateBlockRequest() *AllocateBlockRequest {
	if x != nil {
		return x.AllocateBlockRequest
	}
	return nil
}

func (x *OMRequest) GetDeleteKeysRequest() *DeleteKeysRequest {
	if x != nil {
		return x.DeleteKeysRequest
	}
	return nil
}

func (x *OMRequest) GetInitiateMultiPartUploadRequest() *MultipartInfoInitiateRequest {
	if x != nil {
		return x.InitiateMultiPartUploadRequest
	}
	return nil
}

func (x *OMRequest) GetCommitMultiPartUploadRequest() *MultipartCommitUploadPartRequest {
	if x != nil {
		return x.CommitMultiPartUploadRequest
	}
	return nil
}

func (x *OMRequest) GetCompleteMultiPartUploadRequest() *MultipartUploadCompleteRequest {
	if x != nil {
		return x.CompleteMultiPartUploadRequest
	}
	return nil
}

func (x *OMRequest) GetAbortMultiPartUploadRequest() *MultipartUploadAbortRequest {
	if x != nil {
		return x.AbortMultiPartUploadRequest
	}
	return nil
}

func (x *OMRequest) GetGetS3SecretRequest() *GetS3SecretRequest {
	if x != nil {
		return x.GetS3SecretRequest
	}
	return nil
}

func (x *OMRequest) GetListMultipartUploadPartsRequest() *MultipartUploadListPartsRequest {
	if x != nil {
		return x.ListMultipartUploadPartsRequest
	}
	return nil
}

func (x *OMRequest) GetServiceListRequest() *ServiceListRequest {
	if x != nil {
		return x.ServiceListRequest
	}
	return nil
}

func (x *OMRequest) GetDbUpdatesRequest() *DBUpdatesRequest {
	if x != nil {
		return x.DbUpdatesRequest
	}
	return nil
}

func (x *OMRequest) GetGetDelegationTokenRequest() *common.GetDelegationTokenRequestProto {
	if x != nil {
		return x.GetDelegationTokenRequest
	}
	return nil
}

func (x *OMRequest) GetRenewDelegationTokenRequest() *common.RenewDelegationTokenRequestProto {
	if x != nil {
		return x.RenewDelegationTokenRequest
	}
	return nil
}

func (x *OMRequest) GetCancelDelegationTokenRequest() *common.CancelDelegationTokenRequestProto {
	if x != nil {
		return x.CancelDelegationTokenRequest
	}
	return nil
}

func (x *OMRequest) GetUpdateGetDelegationTokenRequest() *UpdateGetDelegationTokenRequest {
	if x != nil {
		return x.UpdateGetDelegationTokenRequest
	}
	return nil
}

func (x *OMRequest) GetUpdatedRenewDelegationTokenRequest() *UpdateRenewDelegationTokenRequest {
	if x != nil {
		return x.UpdatedRenewDelegationTokenRequest
	}
	return nil
}

func (x *OMRequest) GetGetFileStatusRequest() *GetFileStatusRequest {
	if x != nil {
		return x.GetFileStatusRequest
	}
	return nil
}

func (x *OMRequest) GetCreateDirectoryRequest() *CreateDirectoryRequest {
	if x != nil {
		return x.CreateDirectoryRequest
	}
	return nil
}

func (x *OMRequest) GetCreateFileRequest() *CreateFileRequest {
	if x != nil {
		return x.CreateFileRequest
	}
	return nil
}

func (x *OMRequest) GetLookupFileRequest() *LookupFileRequest {
	if x != nil {
		return x.LookupFileRequest
	}
	return nil
}

func (x *OMRequest) GetListStatusRequest() *ListStatusRequest {
	if x != nil {
		return x.ListStatusRequest
	}
	return nil
}

func (x *OMRequest) GetAddAclRequest() *AddAclRequest {
	if x != nil {
		return x.AddAclRequest
	}
	return nil
}

func (x *OMRequest) GetRemoveAclRequest() *RemoveAclRequest {
	if x != nil {
		return x.RemoveAclRequest
	}
	return nil
}

func (x *OMRequest) GetSetAclRequest() *SetAclRequest {
	if x != nil {
		return x.SetAclRequest
	}
	return nil
}

func (x *OMRequest) GetGetAclRequest() *GetAclRequest {
	if x != nil {
		return x.GetAclRequest
	}
	return nil
}

func (x *OMRequest) GetPurgeKeysRequest() *PurgeKeysRequest {
	if x != nil {
		return x.PurgeKeysRequest
	}
	return nil
}

func (x *OMRequest) GetUpdateGetS3SecretRequest() *UpdateGetS3SecretRequest {
	if x != nil {
		return x.UpdateGetS3SecretRequest
	}
	return nil
}

func (x *OMRequest) GetListMultipartUploadsRequest() *ListMultipartUploadsRequest {
	if x != nil {
		return x.ListMultipartUploadsRequest
	}
	return nil
}

func (x *OMRequest) GetListTrashRequest() *ListTrashRequest {
	if x != nil {
		return x.ListTrashRequest
	}
	return nil
}

func (x *OMRequest) GetRecoverTrashRequest() *RecoverTrashRequest {
	if x != nil {
		return x.RecoverTrashRequest
	}
	return nil
}

type OMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdType *Type `protobuf:"varint,1,req,name=cmdType,enum=hadoop.ozone.Type" json:"cmdType,omitempty"` // Type of the command
	// A string that identifies this command, we generate  Trace ID in Ozone
	// frontend and this allows us to trace that command all over ozone.
	TraceID                          *string                             `protobuf:"bytes,2,opt,name=traceID" json:"traceID,omitempty"`
	Success                          *bool                               `protobuf:"varint,3,opt,name=success,def=1" json:"success,omitempty"`
	Message                          *string                             `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Status                           *Status                             `protobuf:"varint,5,req,name=status,enum=hadoop.ozone.Status" json:"status,omitempty"`
	LeaderOMNodeId                   *string                             `protobuf:"bytes,6,opt,name=leaderOMNodeId" json:"leaderOMNodeId,omitempty"`
	CreateVolumeResponse             *CreateVolumeResponse               `protobuf:"bytes,11,opt,name=createVolumeResponse" json:"createVolumeResponse,omitempty"`
	SetVolumePropertyResponse        *SetVolumePropertyResponse          `protobuf:"bytes,12,opt,name=setVolumePropertyResponse" json:"setVolumePropertyResponse,omitempty"`
	CheckVolumeAccessResponse        *CheckVolumeAccessResponse          `protobuf:"bytes,13,opt,name=checkVolumeAccessResponse" json:"checkVolumeAccessResponse,omitempty"`
	InfoVolumeResponse               *InfoVolumeResponse                 `protobuf:"bytes,14,opt,name=infoVolumeResponse" json:"infoVolumeResponse,omitempty"`
	DeleteVolumeResponse             *DeleteVolumeResponse               `protobuf:"bytes,15,opt,name=deleteVolumeResponse" json:"deleteVolumeResponse,omitempty"`
	ListVolumeResponse               *ListVolumeResponse                 `protobuf:"bytes,16,opt,name=listVolumeResponse" json:"listVolumeResponse,omitempty"`
	CreateBucketResponse             *CreateBucketResponse               `protobuf:"bytes,21,opt,name=createBucketResponse" json:"createBucketResponse,omitempty"`
	InfoBucketResponse               *InfoBucketResponse                 `protobuf:"bytes,22,opt,name=infoBucketResponse" json:"infoBucketResponse,omitempty"`
	SetBucketPropertyResponse        *SetBucketPropertyResponse          `protobuf:"bytes,23,opt,name=setBucketPropertyResponse" json:"setBucketPropertyResponse,omitempty"`
	DeleteBucketResponse             *DeleteBucketResponse               `protobuf:"bytes,24,opt,name=deleteBucketResponse" json:"deleteBucketResponse,omitempty"`
	ListBucketsResponse              *ListBucketsResponse                `protobuf:"bytes,25,opt,name=listBucketsResponse" json:"listBucketsResponse,omitempty"`
	CreateKeyResponse                *CreateKeyResponse                  `protobuf:"bytes,31,opt,name=createKeyResponse" json:"createKeyResponse,omitempty"`
	LookupKeyResponse                *LookupKeyResponse                  `protobuf:"bytes,32,opt,name=lookupKeyResponse" json:"lookupKeyResponse,omitempty"`
	RenameKeyResponse                *RenameKeyResponse                  `protobuf:"bytes,33,opt,name=renameKeyResponse" json:"renameKeyResponse,omitempty"`
	DeleteKeyResponse                *DeleteKeyResponse                  `protobuf:"bytes,34,opt,name=deleteKeyResponse" json:"deleteKeyResponse,omitempty"`
	ListKeysResponse                 *ListKeysResponse                   `protobuf:"bytes,35,opt,name=listKeysResponse" json:"listKeysResponse,omitempty"`
	CommitKeyResponse                *CommitKeyResponse                  `protobuf:"bytes,36,opt,name=commitKeyResponse" json:"commitKeyResponse,omitempty"`
	AllocateBlockResponse            *AllocateBlockResponse              `protobuf:"bytes,37,opt,name=allocateBlockResponse" json:"allocateBlockResponse,omitempty"`
	DeleteKeysResponse               *DeleteKeysResponse                 `protobuf:"bytes,38,opt,name=deleteKeysResponse" json:"deleteKeysResponse,omitempty"`
	InitiateMultiPartUploadResponse  *MultipartInfoInitiateResponse      `protobuf:"bytes,45,opt,name=initiateMultiPartUploadResponse" json:"initiateMultiPartUploadResponse,omitempty"`
	CommitMultiPartUploadResponse    *MultipartCommitUploadPartResponse  `protobuf:"bytes,46,opt,name=commitMultiPartUploadResponse" json:"commitMultiPartUploadResponse,omitempty"`
	CompleteMultiPartUploadResponse  *MultipartUploadCompleteResponse    `protobuf:"bytes,47,opt,name=completeMultiPartUploadResponse" json:"completeMultiPartUploadResponse,omitempty"`
	AbortMultiPartUploadResponse     *MultipartUploadAbortResponse       `protobuf:"bytes,48,opt,name=abortMultiPartUploadResponse" json:"abortMultiPartUploadResponse,omitempty"`
	GetS3SecretResponse              *GetS3SecretResponse                `protobuf:"bytes,49,opt,name=getS3SecretResponse" json:"getS3SecretResponse,omitempty"`
	ListMultipartUploadPartsResponse *MultipartUploadListPartsResponse   `protobuf:"bytes,50,opt,name=listMultipartUploadPartsResponse" json:"listMultipartUploadPartsResponse,omitempty"`
	ServiceListResponse              *ServiceListResponse                `protobuf:"bytes,51,opt,name=ServiceListResponse" json:"ServiceListResponse,omitempty"`
	DbUpdatesResponse                *DBUpdatesResponse                  `protobuf:"bytes,52,opt,name=dbUpdatesResponse" json:"dbUpdatesResponse,omitempty"`
	GetDelegationTokenResponse       *GetDelegationTokenResponseProto    `protobuf:"bytes,61,opt,name=getDelegationTokenResponse" json:"getDelegationTokenResponse,omitempty"`
	RenewDelegationTokenResponse     *RenewDelegationTokenResponseProto  `protobuf:"bytes,62,opt,name=renewDelegationTokenResponse" json:"renewDelegationTokenResponse,omitempty"`
	CancelDelegationTokenResponse    *CancelDelegationTokenResponseProto `protobuf:"bytes,63,opt,name=cancelDelegationTokenResponse" json:"cancelDelegationTokenResponse,omitempty"`
	GetFileStatusResponse            *GetFileStatusResponse              `protobuf:"bytes,70,opt,name=getFileStatusResponse" json:"getFileStatusResponse,omitempty"`
	CreateDirectoryResponse          *CreateDirectoryResponse            `protobuf:"bytes,71,opt,name=createDirectoryResponse" json:"createDirectoryResponse,omitempty"`
	CreateFileResponse               *CreateFileResponse                 `protobuf:"bytes,72,opt,name=createFileResponse" json:"createFileResponse,omitempty"`
	LookupFileResponse               *LookupFileResponse                 `protobuf:"bytes,73,opt,name=lookupFileResponse" json:"lookupFileResponse,omitempty"`
	ListStatusResponse               *ListStatusResponse                 `protobuf:"bytes,74,opt,name=listStatusResponse" json:"listStatusResponse,omitempty"`
	AddAclResponse                   *AddAclResponse                     `protobuf:"bytes,75,opt,name=addAclResponse" json:"addAclResponse,omitempty"`
	RemoveAclResponse                *RemoveAclResponse                  `protobuf:"bytes,76,opt,name=removeAclResponse" json:"removeAclResponse,omitempty"`
	SetAclResponse                   *SetAclResponse                     `protobuf:"bytes,77,opt,name=setAclResponse" json:"setAclResponse,omitempty"`
	GetAclResponse                   *GetAclResponse                     `protobuf:"bytes,78,opt,name=getAclResponse" json:"getAclResponse,omitempty"`
	PurgeKeysResponse                *PurgeKeysResponse                  `protobuf:"bytes,81,opt,name=purgeKeysResponse" json:"purgeKeysResponse,omitempty"`
	ListMultipartUploadsResponse     *ListMultipartUploadsResponse       `protobuf:"bytes,82,opt,name=listMultipartUploadsResponse" json:"listMultipartUploadsResponse,omitempty"`
	ListTrashResponse                *ListTrashResponse                  `protobuf:"bytes,91,opt,name=listTrashResponse" json:"listTrashResponse,omitempty"`
	RecoverTrashResponse             *RecoverTrashResponse               `protobuf:"bytes,92,opt,name=RecoverTrashResponse" json:"RecoverTrashResponse,omitempty"`
}

// Default values for OMResponse fields.
const (
	Default_OMResponse_Success = bool(true)
)

func (x *OMResponse) Reset() {
	*x = OMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OMResponse) ProtoMessage() {}

func (x *OMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OMResponse.ProtoReflect.Descriptor instead.
func (*OMResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{1}
}

func (x *OMResponse) GetCmdType() Type {
	if x != nil && x.CmdType != nil {
		return *x.CmdType
	}
	return Type_CreateVolume
}

func (x *OMResponse) GetTraceID() string {
	if x != nil && x.TraceID != nil {
		return *x.TraceID
	}
	return ""
}

func (x *OMResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_OMResponse_Success
}

func (x *OMResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *OMResponse) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Status_OK
}

func (x *OMResponse) GetLeaderOMNodeId() string {
	if x != nil && x.LeaderOMNodeId != nil {
		return *x.LeaderOMNodeId
	}
	return ""
}

func (x *OMResponse) GetCreateVolumeResponse() *CreateVolumeResponse {
	if x != nil {
		return x.CreateVolumeResponse
	}
	return nil
}

func (x *OMResponse) GetSetVolumePropertyResponse() *SetVolumePropertyResponse {
	if x != nil {
		return x.SetVolumePropertyResponse
	}
	return nil
}

func (x *OMResponse) GetCheckVolumeAccessResponse() *CheckVolumeAccessResponse {
	if x != nil {
		return x.CheckVolumeAccessResponse
	}
	return nil
}

func (x *OMResponse) GetInfoVolumeResponse() *InfoVolumeResponse {
	if x != nil {
		return x.InfoVolumeResponse
	}
	return nil
}

func (x *OMResponse) GetDeleteVolumeResponse() *DeleteVolumeResponse {
	if x != nil {
		return x.DeleteVolumeResponse
	}
	return nil
}

func (x *OMResponse) GetListVolumeResponse() *ListVolumeResponse {
	if x != nil {
		return x.ListVolumeResponse
	}
	return nil
}

func (x *OMResponse) GetCreateBucketResponse() *CreateBucketResponse {
	if x != nil {
		return x.CreateBucketResponse
	}
	return nil
}

func (x *OMResponse) GetInfoBucketResponse() *InfoBucketResponse {
	if x != nil {
		return x.InfoBucketResponse
	}
	return nil
}

func (x *OMResponse) GetSetBucketPropertyResponse() *SetBucketPropertyResponse {
	if x != nil {
		return x.SetBucketPropertyResponse
	}
	return nil
}

func (x *OMResponse) GetDeleteBucketResponse() *DeleteBucketResponse {
	if x != nil {
		return x.DeleteBucketResponse
	}
	return nil
}

func (x *OMResponse) GetListBucketsResponse() *ListBucketsResponse {
	if x != nil {
		return x.ListBucketsResponse
	}
	return nil
}

func (x *OMResponse) GetCreateKeyResponse() *CreateKeyResponse {
	if x != nil {
		return x.CreateKeyResponse
	}
	return nil
}

func (x *OMResponse) GetLookupKeyResponse() *LookupKeyResponse {
	if x != nil {
		return x.LookupKeyResponse
	}
	return nil
}

func (x *OMResponse) GetRenameKeyResponse() *RenameKeyResponse {
	if x != nil {
		return x.RenameKeyResponse
	}
	return nil
}

func (x *OMResponse) GetDeleteKeyResponse() *DeleteKeyResponse {
	if x != nil {
		return x.DeleteKeyResponse
	}
	return nil
}

func (x *OMResponse) GetListKeysResponse() *ListKeysResponse {
	if x != nil {
		return x.ListKeysResponse
	}
	return nil
}

func (x *OMResponse) GetCommitKeyResponse() *CommitKeyResponse {
	if x != nil {
		return x.CommitKeyResponse
	}
	return nil
}

func (x *OMResponse) GetAllocateBlockResponse() *AllocateBlockResponse {
	if x != nil {
		return x.AllocateBlockResponse
	}
	return nil
}

func (x *OMResponse) GetDeleteKeysResponse() *DeleteKeysResponse {
	if x != nil {
		return x.DeleteKeysResponse
	}
	return nil
}

func (x *OMResponse) GetInitiateMultiPartUploadResponse() *MultipartInfoInitiateResponse {
	if x != nil {
		return x.InitiateMultiPartUploadResponse
	}
	return nil
}

func (x *OMResponse) GetCommitMultiPartUploadResponse() *MultipartCommitUploadPartResponse {
	if x != nil {
		return x.CommitMultiPartUploadResponse
	}
	return nil
}

func (x *OMResponse) GetCompleteMultiPartUploadResponse() *MultipartUploadCompleteResponse {
	if x != nil {
		return x.CompleteMultiPartUploadResponse
	}
	return nil
}

func (x *OMResponse) GetAbortMultiPartUploadResponse() *MultipartUploadAbortResponse {
	if x != nil {
		return x.AbortMultiPartUploadResponse
	}
	return nil
}

func (x *OMResponse) GetGetS3SecretResponse() *GetS3SecretResponse {
	if x != nil {
		return x.GetS3SecretResponse
	}
	return nil
}

func (x *OMResponse) GetListMultipartUploadPartsResponse() *MultipartUploadListPartsResponse {
	if x != nil {
		return x.ListMultipartUploadPartsResponse
	}
	return nil
}

func (x *OMResponse) GetServiceListResponse() *ServiceListResponse {
	if x != nil {
		return x.ServiceListResponse
	}
	return nil
}

func (x *OMResponse) GetDbUpdatesResponse() *DBUpdatesResponse {
	if x != nil {
		return x.DbUpdatesResponse
	}
	return nil
}

func (x *OMResponse) GetGetDelegationTokenResponse() *GetDelegationTokenResponseProto {
	if x != nil {
		return x.GetDelegationTokenResponse
	}
	return nil
}

func (x *OMResponse) GetRenewDelegationTokenResponse() *RenewDelegationTokenResponseProto {
	if x != nil {
		return x.RenewDelegationTokenResponse
	}
	return nil
}

func (x *OMResponse) GetCancelDelegationTokenResponse() *CancelDelegationTokenResponseProto {
	if x != nil {
		return x.CancelDelegationTokenResponse
	}
	return nil
}

func (x *OMResponse) GetGetFileStatusResponse() *GetFileStatusResponse {
	if x != nil {
		return x.GetFileStatusResponse
	}
	return nil
}

func (x *OMResponse) GetCreateDirectoryResponse() *CreateDirectoryResponse {
	if x != nil {
		return x.CreateDirectoryResponse
	}
	return nil
}

func (x *OMResponse) GetCreateFileResponse() *CreateFileResponse {
	if x != nil {
		return x.CreateFileResponse
	}
	return nil
}

func (x *OMResponse) GetLookupFileResponse() *LookupFileResponse {
	if x != nil {
		return x.LookupFileResponse
	}
	return nil
}

func (x *OMResponse) GetListStatusResponse() *ListStatusResponse {
	if x != nil {
		return x.ListStatusResponse
	}
	return nil
}

func (x *OMResponse) GetAddAclResponse() *AddAclResponse {
	if x != nil {
		return x.AddAclResponse
	}
	return nil
}

func (x *OMResponse) GetRemoveAclResponse() *RemoveAclResponse {
	if x != nil {
		return x.RemoveAclResponse
	}
	return nil
}

func (x *OMResponse) GetSetAclResponse() *SetAclResponse {
	if x != nil {
		return x.SetAclResponse
	}
	return nil
}

func (x *OMResponse) GetGetAclResponse() *GetAclResponse {
	if x != nil {
		return x.GetAclResponse
	}
	return nil
}

func (x *OMResponse) GetPurgeKeysResponse() *PurgeKeysResponse {
	if x != nil {
		return x.PurgeKeysResponse
	}
	return nil
}

func (x *OMResponse) GetListMultipartUploadsResponse() *ListMultipartUploadsResponse {
	if x != nil {
		return x.ListMultipartUploadsResponse
	}
	return nil
}

func (x *OMResponse) GetListTrashResponse() *ListTrashResponse {
	if x != nil {
		return x.ListTrashResponse
	}
	return nil
}

func (x *OMResponse) GetRecoverTrashResponse() *RecoverTrashResponse {
	if x != nil {
		return x.RecoverTrashResponse
	}
	return nil
}

//*
//This command acts as a list command for deleted keys that are still present
//in the deleted table on Ozone Manager.
type ListTrashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName   *string `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName   *string `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	StartKeyName *string `protobuf:"bytes,3,opt,name=startKeyName" json:"startKeyName,omitempty"`
	KeyPrefix    *string `protobuf:"bytes,4,opt,name=keyPrefix" json:"keyPrefix,omitempty"`
	MaxKeys      *int32  `protobuf:"varint,5,opt,name=maxKeys" json:"maxKeys,omitempty"`
}

func (x *ListTrashRequest) Reset() {
	*x = ListTrashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrashRequest) ProtoMessage() {}

func (x *ListTrashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrashRequest.ProtoReflect.Descriptor instead.
func (*ListTrashRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{2}
}

func (x *ListTrashRequest) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *ListTrashRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *ListTrashRequest) GetStartKeyName() string {
	if x != nil && x.StartKeyName != nil {
		return *x.StartKeyName
	}
	return ""
}

func (x *ListTrashRequest) GetKeyPrefix() string {
	if x != nil && x.KeyPrefix != nil {
		return *x.KeyPrefix
	}
	return ""
}

func (x *ListTrashRequest) GetMaxKeys() int32 {
	if x != nil && x.MaxKeys != nil {
		return *x.MaxKeys
	}
	return 0
}

type ListTrashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedKeys []*RepeatedKeyInfo `protobuf:"bytes,1,rep,name=deletedKeys" json:"deletedKeys,omitempty"`
}

func (x *ListTrashResponse) Reset() {
	*x = ListTrashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrashResponse) ProtoMessage() {}

func (x *ListTrashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrashResponse.ProtoReflect.Descriptor instead.
func (*ListTrashResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{3}
}

func (x *ListTrashResponse) GetDeletedKeys() []*RepeatedKeyInfo {
	if x != nil {
		return x.DeletedKeys
	}
	return nil
}

type RecoverTrashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName        *string `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName        *string `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	KeyName           *string `protobuf:"bytes,3,req,name=keyName" json:"keyName,omitempty"`
	DestinationBucket *string `protobuf:"bytes,4,req,name=destinationBucket" json:"destinationBucket,omitempty"`
}

func (x *RecoverTrashRequest) Reset() {
	*x = RecoverTrashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverTrashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverTrashRequest) ProtoMessage() {}

func (x *RecoverTrashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverTrashRequest.ProtoReflect.Descriptor instead.
func (*RecoverTrashRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{4}
}

func (x *RecoverTrashRequest) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *RecoverTrashRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *RecoverTrashRequest) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *RecoverTrashRequest) GetDestinationBucket() string {
	if x != nil && x.DestinationBucket != nil {
		return *x.DestinationBucket
	}
	return ""
}

type RecoverTrashResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *bool `protobuf:"varint,1,req,name=response" json:"response,omitempty"`
}

func (x *RecoverTrashResponse) Reset() {
	*x = RecoverTrashResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverTrashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverTrashResponse) ProtoMessage() {}

func (x *RecoverTrashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverTrashResponse.ProtoReflect.Descriptor instead.
func (*RecoverTrashResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{5}
}

func (x *RecoverTrashResponse) GetResponse() bool {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return false
}

type VolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminName        *string          `protobuf:"bytes,1,req,name=adminName" json:"adminName,omitempty"`
	OwnerName        *string          `protobuf:"bytes,2,req,name=ownerName" json:"ownerName,omitempty"`
	Volume           *string          `protobuf:"bytes,3,req,name=volume" json:"volume,omitempty"`
	QuotaInBytes     *uint64          `protobuf:"varint,4,opt,name=quotaInBytes" json:"quotaInBytes,omitempty"`
	Metadata         []*hdds.KeyValue `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty"`
	VolumeAcls       []*OzoneAclInfo  `protobuf:"bytes,6,rep,name=volumeAcls" json:"volumeAcls,omitempty"`
	CreationTime     *uint64          `protobuf:"varint,7,opt,name=creationTime" json:"creationTime,omitempty"`
	ObjectID         *uint64          `protobuf:"varint,8,opt,name=objectID" json:"objectID,omitempty"`
	UpdateID         *uint64          `protobuf:"varint,9,opt,name=updateID" json:"updateID,omitempty"`
	ModificationTime *uint64          `protobuf:"varint,10,opt,name=modificationTime" json:"modificationTime,omitempty"`
}

func (x *VolumeInfo) Reset() {
	*x = VolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeInfo) ProtoMessage() {}

func (x *VolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeInfo.ProtoReflect.Descriptor instead.
func (*VolumeInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{6}
}

func (x *VolumeInfo) GetAdminName() string {
	if x != nil && x.AdminName != nil {
		return *x.AdminName
	}
	return ""
}

func (x *VolumeInfo) GetOwnerName() string {
	if x != nil && x.OwnerName != nil {
		return *x.OwnerName
	}
	return ""
}

func (x *VolumeInfo) GetVolume() string {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return ""
}

func (x *VolumeInfo) GetQuotaInBytes() uint64 {
	if x != nil && x.QuotaInBytes != nil {
		return *x.QuotaInBytes
	}
	return 0
}

func (x *VolumeInfo) GetMetadata() []*hdds.KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VolumeInfo) GetVolumeAcls() []*OzoneAclInfo {
	if x != nil {
		return x.VolumeAcls
	}
	return nil
}

func (x *VolumeInfo) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *VolumeInfo) GetObjectID() uint64 {
	if x != nil && x.ObjectID != nil {
		return *x.ObjectID
	}
	return 0
}

func (x *VolumeInfo) GetUpdateID() uint64 {
	if x != nil && x.UpdateID != nil {
		return *x.UpdateID
	}
	return 0
}

func (x *VolumeInfo) GetModificationTime() uint64 {
	if x != nil && x.ModificationTime != nil {
		return *x.ModificationTime
	}
	return 0
}

//*
//User information which will be extracted during RPC context and used
//during validating Acl.
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName      *string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	RemoteAddress *string `protobuf:"bytes,3,opt,name=remoteAddress" json:"remoteAddress,omitempty"`
	HostName      *string `protobuf:"bytes,4,opt,name=hostName" json:"hostName,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *UserInfo) GetRemoteAddress() string {
	if x != nil && x.RemoteAddress != nil {
		return *x.RemoteAddress
	}
	return ""
}

func (x *UserInfo) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

//*
//This will be used during OM HA, once leader generates token sends this
//request via ratis to persist to OM DB. This request will be internally used
//by OM for replicating token across a quorum of OMs.
type UpdateGetDelegationTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetDelegationTokenResponse *GetDelegationTokenResponseProto `protobuf:"bytes,1,req,name=getDelegationTokenResponse" json:"getDelegationTokenResponse,omitempty"`
	TokenRenewInterval         *uint64                          `protobuf:"varint,2,opt,name=tokenRenewInterval" json:"tokenRenewInterval,omitempty"`
}

func (x *UpdateGetDelegationTokenRequest) Reset() {
	*x = UpdateGetDelegationTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGetDelegationTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGetDelegationTokenRequest) ProtoMessage() {}

func (x *UpdateGetDelegationTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGetDelegationTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateGetDelegationTokenRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateGetDelegationTokenRequest) GetGetDelegationTokenResponse() *GetDelegationTokenResponseProto {
	if x != nil {
		return x.GetDelegationTokenResponse
	}
	return nil
}

func (x *UpdateGetDelegationTokenRequest) GetTokenRenewInterval() uint64 {
	if x != nil && x.TokenRenewInterval != nil {
		return *x.TokenRenewInterval
	}
	return 0
}

//*
//This will be used during OM HA, once leader renews token, sends this
//request via ratis to persist to OM DB. This request will be internally used
//by OM for replicating renewed token information across a quorum of OMs.
type UpdateRenewDelegationTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RenewDelegationTokenRequest  *common.RenewDelegationTokenRequestProto `protobuf:"bytes,1,req,name=renewDelegationTokenRequest" json:"renewDelegationTokenRequest,omitempty"`
	RenewDelegationTokenResponse *RenewDelegationTokenResponseProto       `protobuf:"bytes,2,req,name=renewDelegationTokenResponse" json:"renewDelegationTokenResponse,omitempty"`
}

func (x *UpdateRenewDelegationTokenRequest) Reset() {
	*x = UpdateRenewDelegationTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRenewDelegationTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRenewDelegationTokenRequest) ProtoMessage() {}

func (x *UpdateRenewDelegationTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRenewDelegationTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateRenewDelegationTokenRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRenewDelegationTokenRequest) GetRenewDelegationTokenRequest() *common.RenewDelegationTokenRequestProto {
	if x != nil {
		return x.RenewDelegationTokenRequest
	}
	return nil
}

func (x *UpdateRenewDelegationTokenRequest) GetRenewDelegationTokenResponse() *RenewDelegationTokenResponseProto {
	if x != nil {
		return x.RenewDelegationTokenResponse
	}
	return nil
}

//*
//Creates a volume
type CreateVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeInfo *VolumeInfo `protobuf:"bytes,1,req,name=volumeInfo" json:"volumeInfo,omitempty"`
}

func (x *CreateVolumeRequest) Reset() {
	*x = CreateVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeRequest) ProtoMessage() {}

func (x *CreateVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeRequest.ProtoReflect.Descriptor instead.
func (*CreateVolumeRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{10}
}

func (x *CreateVolumeRequest) GetVolumeInfo() *VolumeInfo {
	if x != nil {
		return x.VolumeInfo
	}
	return nil
}

type CreateVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateVolumeResponse) Reset() {
	*x = CreateVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeResponse) ProtoMessage() {}

func (x *CreateVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeResponse.ProtoReflect.Descriptor instead.
func (*CreateVolumeResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{11}
}

type UserVolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeNames []string `protobuf:"bytes,1,rep,name=volumeNames" json:"volumeNames,omitempty"`
	ObjectID    *uint64  `protobuf:"varint,2,opt,name=objectID" json:"objectID,omitempty"`
	UpdateID    *uint64  `protobuf:"varint,3,opt,name=updateID" json:"updateID,omitempty"`
}

func (x *UserVolumeInfo) Reset() {
	*x = UserVolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVolumeInfo) ProtoMessage() {}

func (x *UserVolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVolumeInfo.ProtoReflect.Descriptor instead.
func (*UserVolumeInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{12}
}

func (x *UserVolumeInfo) GetVolumeNames() []string {
	if x != nil {
		return x.VolumeNames
	}
	return nil
}

func (x *UserVolumeInfo) GetObjectID() uint64 {
	if x != nil && x.ObjectID != nil {
		return *x.ObjectID
	}
	return 0
}

func (x *UserVolumeInfo) GetUpdateID() uint64 {
	if x != nil && x.UpdateID != nil {
		return *x.UpdateID
	}
	return 0
}

//*
//Changes the Volume Properties -- like ownership and quota for a volume.
type SetVolumePropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName       *string `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	OwnerName        *string `protobuf:"bytes,2,opt,name=ownerName" json:"ownerName,omitempty"`
	QuotaInBytes     *uint64 `protobuf:"varint,3,opt,name=quotaInBytes" json:"quotaInBytes,omitempty"`
	ModificationTime *uint64 `protobuf:"varint,4,opt,name=modificationTime" json:"modificationTime,omitempty"`
}

func (x *SetVolumePropertyRequest) Reset() {
	*x = SetVolumePropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVolumePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVolumePropertyRequest) ProtoMessage() {}

func (x *SetVolumePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVolumePropertyRequest.ProtoReflect.Descriptor instead.
func (*SetVolumePropertyRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{13}
}

func (x *SetVolumePropertyRequest) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *SetVolumePropertyRequest) GetOwnerName() string {
	if x != nil && x.OwnerName != nil {
		return *x.OwnerName
	}
	return ""
}

func (x *SetVolumePropertyRequest) GetQuotaInBytes() uint64 {
	if x != nil && x.QuotaInBytes != nil {
		return *x.QuotaInBytes
	}
	return 0
}

func (x *SetVolumePropertyRequest) GetModificationTime() uint64 {
	if x != nil && x.ModificationTime != nil {
		return *x.ModificationTime
	}
	return 0
}

type SetVolumePropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *bool `protobuf:"varint,1,opt,name=response" json:"response,omitempty"`
}

func (x *SetVolumePropertyResponse) Reset() {
	*x = SetVolumePropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVolumePropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVolumePropertyResponse) ProtoMessage() {}

func (x *SetVolumePropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVolumePropertyResponse.ProtoReflect.Descriptor instead.
func (*SetVolumePropertyResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{14}
}

func (x *SetVolumePropertyResponse) GetResponse() bool {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return false
}

//*
// Checks if the user has specified permissions for the volume
type CheckVolumeAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName *string       `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	UserAcl    *OzoneAclInfo `protobuf:"bytes,2,req,name=userAcl" json:"userAcl,omitempty"`
}

func (x *CheckVolumeAccessRequest) Reset() {
	*x = CheckVolumeAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckVolumeAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckVolumeAccessRequest) ProtoMessage() {}

func (x *CheckVolumeAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckVolumeAccessRequest.ProtoReflect.Descriptor instead.
func (*CheckVolumeAccessRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{15}
}

func (x *CheckVolumeAccessRequest) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *CheckVolumeAccessRequest) GetUserAcl() *OzoneAclInfo {
	if x != nil {
		return x.UserAcl
	}
	return nil
}

type CheckVolumeAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckVolumeAccessResponse) Reset() {
	*x = CheckVolumeAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckVolumeAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckVolumeAccessResponse) ProtoMessage() {}

func (x *CheckVolumeAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckVolumeAccessResponse.ProtoReflect.Descriptor instead.
func (*CheckVolumeAccessResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{16}
}

type InfoVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName *string `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
}

func (x *InfoVolumeRequest) Reset() {
	*x = InfoVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoVolumeRequest) ProtoMessage() {}

func (x *InfoVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoVolumeRequest.ProtoReflect.Descriptor instead.
func (*InfoVolumeRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{17}
}

func (x *InfoVolumeRequest) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

type InfoVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeInfo *VolumeInfo `protobuf:"bytes,2,opt,name=volumeInfo" json:"volumeInfo,omitempty"`
}

func (x *InfoVolumeResponse) Reset() {
	*x = InfoVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoVolumeResponse) ProtoMessage() {}

func (x *InfoVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoVolumeResponse.ProtoReflect.Descriptor instead.
func (*InfoVolumeResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{18}
}

func (x *InfoVolumeResponse) GetVolumeInfo() *VolumeInfo {
	if x != nil {
		return x.VolumeInfo
	}
	return nil
}

//*
//Deletes an existing volume.
type DeleteVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName *string `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
}

func (x *DeleteVolumeRequest) Reset() {
	*x = DeleteVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeRequest) ProtoMessage() {}

func (x *DeleteVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeRequest.ProtoReflect.Descriptor instead.
func (*DeleteVolumeRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteVolumeRequest) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

type DeleteVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVolumeResponse) Reset() {
	*x = DeleteVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeResponse) ProtoMessage() {}

func (x *DeleteVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeResponse.ProtoReflect.Descriptor instead.
func (*DeleteVolumeResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{20}
}

type ListVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope    *ListVolumeRequest_Scope `protobuf:"varint,1,req,name=scope,enum=hadoop.ozone.ListVolumeRequest_Scope" json:"scope,omitempty"`
	UserName *string                  `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	Prefix   *string                  `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
	PrevKey  *string                  `protobuf:"bytes,4,opt,name=prevKey" json:"prevKey,omitempty"`
	MaxKeys  *uint32                  `protobuf:"varint,5,opt,name=maxKeys" json:"maxKeys,omitempty"`
}

func (x *ListVolumeRequest) Reset() {
	*x = ListVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeRequest) ProtoMessage() {}

func (x *ListVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeRequest.ProtoReflect.Descriptor instead.
func (*ListVolumeRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{21}
}

func (x *ListVolumeRequest) GetScope() ListVolumeRequest_Scope {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ListVolumeRequest_USER_VOLUMES
}

func (x *ListVolumeRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ListVolumeRequest) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *ListVolumeRequest) GetPrevKey() string {
	if x != nil && x.PrevKey != nil {
		return *x.PrevKey
	}
	return ""
}

func (x *ListVolumeRequest) GetMaxKeys() uint32 {
	if x != nil && x.MaxKeys != nil {
		return *x.MaxKeys
	}
	return 0
}

type ListVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeInfo []*VolumeInfo `protobuf:"bytes,2,rep,name=volumeInfo" json:"volumeInfo,omitempty"`
}

func (x *ListVolumeResponse) Reset() {
	*x = ListVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVolumeResponse) ProtoMessage() {}

func (x *ListVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVolumeResponse.ProtoReflect.Descriptor instead.
func (*ListVolumeResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{22}
}

func (x *ListVolumeResponse) GetVolumeInfo() []*VolumeInfo {
	if x != nil {
		return x.VolumeInfo
	}
	return nil
}

type BucketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName       *string                    `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName       *string                    `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	Acls             []*OzoneAclInfo            `protobuf:"bytes,3,rep,name=acls" json:"acls,omitempty"`
	IsVersionEnabled *bool                      `protobuf:"varint,4,req,name=isVersionEnabled,def=0" json:"isVersionEnabled,omitempty"`
	StorageType      *StorageTypeProto          `protobuf:"varint,5,req,name=storageType,enum=hadoop.ozone.StorageTypeProto,def=1" json:"storageType,omitempty"`
	CreationTime     *uint64                    `protobuf:"varint,6,opt,name=creationTime" json:"creationTime,omitempty"`
	Metadata         []*hdds.KeyValue           `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty"`
	Beinfo           *BucketEncryptionInfoProto `protobuf:"bytes,8,opt,name=beinfo" json:"beinfo,omitempty"`
	ObjectID         *uint64                    `protobuf:"varint,9,opt,name=objectID" json:"objectID,omitempty"`
	UpdateID         *uint64                    `protobuf:"varint,10,opt,name=updateID" json:"updateID,omitempty"`
	ModificationTime *uint64                    `protobuf:"varint,11,opt,name=modificationTime" json:"modificationTime,omitempty"`
	SourceVolume     *string                    `protobuf:"bytes,12,opt,name=sourceVolume" json:"sourceVolume,omitempty"`
	SourceBucket     *string                    `protobuf:"bytes,13,opt,name=sourceBucket" json:"sourceBucket,omitempty"`
}

// Default values for BucketInfo fields.
const (
	Default_BucketInfo_IsVersionEnabled = bool(false)
	Default_BucketInfo_StorageType      = StorageTypeProto_DISK
)

func (x *BucketInfo) Reset() {
	*x = BucketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketInfo) ProtoMessage() {}

func (x *BucketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketInfo.ProtoReflect.Descriptor instead.
func (*BucketInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{23}
}

func (x *BucketInfo) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *BucketInfo) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *BucketInfo) GetAcls() []*OzoneAclInfo {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *BucketInfo) GetIsVersionEnabled() bool {
	if x != nil && x.IsVersionEnabled != nil {
		return *x.IsVersionEnabled
	}
	return Default_BucketInfo_IsVersionEnabled
}

func (x *BucketInfo) GetStorageType() StorageTypeProto {
	if x != nil && x.StorageType != nil {
		return *x.StorageType
	}
	return Default_BucketInfo_StorageType
}

func (x *BucketInfo) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *BucketInfo) GetMetadata() []*hdds.KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BucketInfo) GetBeinfo() *BucketEncryptionInfoProto {
	if x != nil {
		return x.Beinfo
	}
	return nil
}

func (x *BucketInfo) GetObjectID() uint64 {
	if x != nil && x.ObjectID != nil {
		return *x.ObjectID
	}
	return 0
}

func (x *BucketInfo) GetUpdateID() uint64 {
	if x != nil && x.UpdateID != nil {
		return *x.UpdateID
	}
	return 0
}

func (x *BucketInfo) GetModificationTime() uint64 {
	if x != nil && x.ModificationTime != nil {
		return *x.ModificationTime
	}
	return 0
}

func (x *BucketInfo) GetSourceVolume() string {
	if x != nil && x.SourceVolume != nil {
		return *x.SourceVolume
	}
	return ""
}

func (x *BucketInfo) GetSourceBucket() string {
	if x != nil && x.SourceBucket != nil {
		return *x.SourceBucket
	}
	return ""
}

//*
// Encryption information for bucket (bucket key)
type BucketEncryptionInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyName               *string                     `protobuf:"bytes,1,req,name=keyName" json:"keyName,omitempty"`
	Suite                 *CipherSuiteProto           `protobuf:"varint,2,opt,name=suite,enum=hadoop.ozone.CipherSuiteProto" json:"suite,omitempty"`
	CryptoProtocolVersion *CryptoProtocolVersionProto `protobuf:"varint,3,opt,name=cryptoProtocolVersion,enum=hadoop.ozone.CryptoProtocolVersionProto" json:"cryptoProtocolVersion,omitempty"`
}

func (x *BucketEncryptionInfoProto) Reset() {
	*x = BucketEncryptionInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketEncryptionInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketEncryptionInfoProto) ProtoMessage() {}

func (x *BucketEncryptionInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketEncryptionInfoProto.ProtoReflect.Descriptor instead.
func (*BucketEncryptionInfoProto) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{24}
}

func (x *BucketEncryptionInfoProto) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *BucketEncryptionInfoProto) GetSuite() CipherSuiteProto {
	if x != nil && x.Suite != nil {
		return *x.Suite
	}
	return CipherSuiteProto_UNKNOWN
}

func (x *BucketEncryptionInfoProto) GetCryptoProtocolVersion() CryptoProtocolVersionProto {
	if x != nil && x.CryptoProtocolVersion != nil {
		return *x.CryptoProtocolVersion
	}
	return CryptoProtocolVersionProto_UNKNOWN_PROTOCOL_VERSION
}

//*
// Encryption information for a file.
type FileEncryptionInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suite                 *CipherSuiteProto           `protobuf:"varint,1,req,name=suite,enum=hadoop.ozone.CipherSuiteProto" json:"suite,omitempty"`
	CryptoProtocolVersion *CryptoProtocolVersionProto `protobuf:"varint,2,req,name=cryptoProtocolVersion,enum=hadoop.ozone.CryptoProtocolVersionProto" json:"cryptoProtocolVersion,omitempty"`
	Key                   []byte                      `protobuf:"bytes,3,req,name=key" json:"key,omitempty"`
	Iv                    []byte                      `protobuf:"bytes,4,req,name=iv" json:"iv,omitempty"`
	KeyName               *string                     `protobuf:"bytes,5,req,name=keyName" json:"keyName,omitempty"`
	EzKeyVersionName      *string                     `protobuf:"bytes,6,req,name=ezKeyVersionName" json:"ezKeyVersionName,omitempty"`
}

func (x *FileEncryptionInfoProto) Reset() {
	*x = FileEncryptionInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileEncryptionInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileEncryptionInfoProto) ProtoMessage() {}

func (x *FileEncryptionInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileEncryptionInfoProto.ProtoReflect.Descriptor instead.
func (*FileEncryptionInfoProto) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{25}
}

func (x *FileEncryptionInfoProto) GetSuite() CipherSuiteProto {
	if x != nil && x.Suite != nil {
		return *x.Suite
	}
	return CipherSuiteProto_UNKNOWN
}

func (x *FileEncryptionInfoProto) GetCryptoProtocolVersion() CryptoProtocolVersionProto {
	if x != nil && x.CryptoProtocolVersion != nil {
		return *x.CryptoProtocolVersion
	}
	return CryptoProtocolVersionProto_UNKNOWN_PROTOCOL_VERSION
}

func (x *FileEncryptionInfoProto) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *FileEncryptionInfoProto) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *FileEncryptionInfoProto) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *FileEncryptionInfoProto) GetEzKeyVersionName() string {
	if x != nil && x.EzKeyVersionName != nil {
		return *x.EzKeyVersionName
	}
	return ""
}

//*
// Encryption information for an individual
// file within an encryption zone
type PerFileEncryptionInfoProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              []byte  `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Iv               []byte  `protobuf:"bytes,2,req,name=iv" json:"iv,omitempty"`
	EzKeyVersionName *string `protobuf:"bytes,3,req,name=ezKeyVersionName" json:"ezKeyVersionName,omitempty"`
}

func (x *PerFileEncryptionInfoProto) Reset() {
	*x = PerFileEncryptionInfoProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerFileEncryptionInfoProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerFileEncryptionInfoProto) ProtoMessage() {}

func (x *PerFileEncryptionInfoProto) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerFileEncryptionInfoProto.ProtoReflect.Descriptor instead.
func (*PerFileEncryptionInfoProto) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{26}
}

func (x *PerFileEncryptionInfoProto) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PerFileEncryptionInfoProto) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *PerFileEncryptionInfoProto) GetEzKeyVersionName() string {
	if x != nil && x.EzKeyVersionName != nil {
		return *x.EzKeyVersionName
	}
	return ""
}

type DataEncryptionKeyProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId               *uint32 `protobuf:"varint,1,req,name=keyId" json:"keyId,omitempty"`
	Nonce               []byte  `protobuf:"bytes,3,req,name=nonce" json:"nonce,omitempty"`
	EncryptionKey       []byte  `protobuf:"bytes,4,req,name=encryptionKey" json:"encryptionKey,omitempty"`
	ExpiryDate          *uint64 `protobuf:"varint,5,req,name=expiryDate" json:"expiryDate,omitempty"`
	EncryptionAlgorithm *string `protobuf:"bytes,6,opt,name=encryptionAlgorithm" json:"encryptionAlgorithm,omitempty"`
}

func (x *DataEncryptionKeyProto) Reset() {
	*x = DataEncryptionKeyProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataEncryptionKeyProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataEncryptionKeyProto) ProtoMessage() {}

func (x *DataEncryptionKeyProto) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataEncryptionKeyProto.ProtoReflect.Descriptor instead.
func (*DataEncryptionKeyProto) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{27}
}

func (x *DataEncryptionKeyProto) GetKeyId() uint32 {
	if x != nil && x.KeyId != nil {
		return *x.KeyId
	}
	return 0
}

func (x *DataEncryptionKeyProto) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DataEncryptionKeyProto) GetEncryptionKey() []byte {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

func (x *DataEncryptionKeyProto) GetExpiryDate() uint64 {
	if x != nil && x.ExpiryDate != nil {
		return *x.ExpiryDate
	}
	return 0
}

func (x *DataEncryptionKeyProto) GetEncryptionAlgorithm() string {
	if x != nil && x.EncryptionAlgorithm != nil {
		return *x.EncryptionAlgorithm
	}
	return ""
}

type BucketArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName       *string           `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName       *string           `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	IsVersionEnabled *bool             `protobuf:"varint,5,opt,name=isVersionEnabled" json:"isVersionEnabled,omitempty"`
	StorageType      *StorageTypeProto `protobuf:"varint,6,opt,name=storageType,enum=hadoop.ozone.StorageTypeProto" json:"storageType,omitempty"`
	Metadata         []*hdds.KeyValue  `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty"`
}

func (x *BucketArgs) Reset() {
	*x = BucketArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketArgs) ProtoMessage() {}

func (x *BucketArgs) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketArgs.ProtoReflect.Descriptor instead.
func (*BucketArgs) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{28}
}

func (x *BucketArgs) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *BucketArgs) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *BucketArgs) GetIsVersionEnabled() bool {
	if x != nil && x.IsVersionEnabled != nil {
		return *x.IsVersionEnabled
	}
	return false
}

func (x *BucketArgs) GetStorageType() StorageTypeProto {
	if x != nil && x.StorageType != nil {
		return *x.StorageType
	}
	return StorageTypeProto_DISK
}

func (x *BucketArgs) GetMetadata() []*hdds.KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PrefixInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string          `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Acls     []*OzoneAclInfo  `protobuf:"bytes,2,rep,name=acls" json:"acls,omitempty"`
	Metadata []*hdds.KeyValue `protobuf:"bytes,3,rep,name=metadata" json:"metadata,omitempty"`
	ObjectID *uint64          `protobuf:"varint,4,opt,name=objectID" json:"objectID,omitempty"`
	UpdateID *uint64          `protobuf:"varint,5,opt,name=updateID" json:"updateID,omitempty"`
}

func (x *PrefixInfo) Reset() {
	*x = PrefixInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixInfo) ProtoMessage() {}

func (x *PrefixInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixInfo.ProtoReflect.Descriptor instead.
func (*PrefixInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{29}
}

func (x *PrefixInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PrefixInfo) GetAcls() []*OzoneAclInfo {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *PrefixInfo) GetMetadata() []*hdds.KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PrefixInfo) GetObjectID() uint64 {
	if x != nil && x.ObjectID != nil {
		return *x.ObjectID
	}
	return 0
}

func (x *PrefixInfo) GetUpdateID() uint64 {
	if x != nil && x.UpdateID != nil {
		return *x.UpdateID
	}
	return 0
}

type OzoneObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResType   *OzoneObj_ObjectType `protobuf:"varint,1,req,name=resType,enum=hadoop.ozone.OzoneObj_ObjectType" json:"resType,omitempty"`
	StoreType *OzoneObj_StoreType  `protobuf:"varint,2,req,name=storeType,enum=hadoop.ozone.OzoneObj_StoreType,def=2" json:"storeType,omitempty"`
	Path      *string              `protobuf:"bytes,3,req,name=path" json:"path,omitempty"`
}

// Default values for OzoneObj fields.
const (
	Default_OzoneObj_StoreType = OzoneObj_S3
)

func (x *OzoneObj) Reset() {
	*x = OzoneObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OzoneObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OzoneObj) ProtoMessage() {}

func (x *OzoneObj) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OzoneObj.ProtoReflect.Descriptor instead.
func (*OzoneObj) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{30}
}

func (x *OzoneObj) GetResType() OzoneObj_ObjectType {
	if x != nil && x.ResType != nil {
		return *x.ResType
	}
	return OzoneObj_VOLUME
}

func (x *OzoneObj) GetStoreType() OzoneObj_StoreType {
	if x != nil && x.StoreType != nil {
		return *x.StoreType
	}
	return Default_OzoneObj_StoreType
}

func (x *OzoneObj) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type OzoneAclInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *OzoneAclInfo_OzoneAclType  `protobuf:"varint,1,req,name=type,enum=hadoop.ozone.OzoneAclInfo_OzoneAclType" json:"type,omitempty"`
	Name     *string                     `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Rights   []byte                      `protobuf:"bytes,3,req,name=rights" json:"rights,omitempty"`
	AclScope *OzoneAclInfo_OzoneAclScope `protobuf:"varint,4,req,name=aclScope,enum=hadoop.ozone.OzoneAclInfo_OzoneAclScope,def=0" json:"aclScope,omitempty"`
}

// Default values for OzoneAclInfo fields.
const (
	Default_OzoneAclInfo_AclScope = OzoneAclInfo_ACCESS
)

func (x *OzoneAclInfo) Reset() {
	*x = OzoneAclInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OzoneAclInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OzoneAclInfo) ProtoMessage() {}

func (x *OzoneAclInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OzoneAclInfo.ProtoReflect.Descriptor instead.
func (*OzoneAclInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{31}
}

func (x *OzoneAclInfo) GetType() OzoneAclInfo_OzoneAclType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return OzoneAclInfo_USER
}

func (x *OzoneAclInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OzoneAclInfo) GetRights() []byte {
	if x != nil {
		return x.Rights
	}
	return nil
}

func (x *OzoneAclInfo) GetAclScope() OzoneAclInfo_OzoneAclScope {
	if x != nil && x.AclScope != nil {
		return *x.AclScope
	}
	return Default_OzoneAclInfo_AclScope
}

type GetAclRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obj *OzoneObj `protobuf:"bytes,1,req,name=obj" json:"obj,omitempty"`
}

func (x *GetAclRequest) Reset() {
	*x = GetAclRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAclRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAclRequest) ProtoMessage() {}

func (x *GetAclRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAclRequest.ProtoReflect.Descriptor instead.
func (*GetAclRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{32}
}

func (x *GetAclRequest) GetObj() *OzoneObj {
	if x != nil {
		return x.Obj
	}
	return nil
}

type GetAclResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acls []*OzoneAclInfo `protobuf:"bytes,1,rep,name=acls" json:"acls,omitempty"`
}

func (x *GetAclResponse) Reset() {
	*x = GetAclResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAclResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAclResponse) ProtoMessage() {}

func (x *GetAclResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAclResponse.ProtoReflect.Descriptor instead.
func (*GetAclResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{33}
}

func (x *GetAclResponse) GetAcls() []*OzoneAclInfo {
	if x != nil {
		return x.Acls
	}
	return nil
}

type AddAclRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obj *OzoneObj     `protobuf:"bytes,1,req,name=obj" json:"obj,omitempty"`
	Acl *OzoneAclInfo `protobuf:"bytes,2,req,name=acl" json:"acl,omitempty"`
}

func (x *AddAclRequest) Reset() {
	*x = AddAclRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAclRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAclRequest) ProtoMessage() {}

func (x *AddAclRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAclRequest.ProtoReflect.Descriptor instead.
func (*AddAclRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{34}
}

func (x *AddAclRequest) GetObj() *OzoneObj {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *AddAclRequest) GetAcl() *OzoneAclInfo {
	if x != nil {
		return x.Acl
	}
	return nil
}

type AddAclResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *bool `protobuf:"varint,1,req,name=response" json:"response,omitempty"`
}

func (x *AddAclResponse) Reset() {
	*x = AddAclResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAclResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAclResponse) ProtoMessage() {}

func (x *AddAclResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAclResponse.ProtoReflect.Descriptor instead.
func (*AddAclResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{35}
}

func (x *AddAclResponse) GetResponse() bool {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return false
}

type RemoveAclRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obj *OzoneObj     `protobuf:"bytes,1,req,name=obj" json:"obj,omitempty"`
	Acl *OzoneAclInfo `protobuf:"bytes,2,req,name=acl" json:"acl,omitempty"`
}

func (x *RemoveAclRequest) Reset() {
	*x = RemoveAclRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAclRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAclRequest) ProtoMessage() {}

func (x *RemoveAclRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAclRequest.ProtoReflect.Descriptor instead.
func (*RemoveAclRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{36}
}

func (x *RemoveAclRequest) GetObj() *OzoneObj {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *RemoveAclRequest) GetAcl() *OzoneAclInfo {
	if x != nil {
		return x.Acl
	}
	return nil
}

type RemoveAclResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *bool `protobuf:"varint,1,req,name=response" json:"response,omitempty"`
}

func (x *RemoveAclResponse) Reset() {
	*x = RemoveAclResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAclResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAclResponse) ProtoMessage() {}

func (x *RemoveAclResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAclResponse.ProtoReflect.Descriptor instead.
func (*RemoveAclResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{37}
}

func (x *RemoveAclResponse) GetResponse() bool {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return false
}

type SetAclRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obj *OzoneObj       `protobuf:"bytes,1,req,name=obj" json:"obj,omitempty"`
	Acl []*OzoneAclInfo `protobuf:"bytes,2,rep,name=acl" json:"acl,omitempty"`
}

func (x *SetAclRequest) Reset() {
	*x = SetAclRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAclRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAclRequest) ProtoMessage() {}

func (x *SetAclRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAclRequest.ProtoReflect.Descriptor instead.
func (*SetAclRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{38}
}

func (x *SetAclRequest) GetObj() *OzoneObj {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *SetAclRequest) GetAcl() []*OzoneAclInfo {
	if x != nil {
		return x.Acl
	}
	return nil
}

type SetAclResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *bool `protobuf:"varint,1,req,name=response" json:"response,omitempty"`
}

func (x *SetAclResponse) Reset() {
	*x = SetAclResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAclResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAclResponse) ProtoMessage() {}

func (x *SetAclResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAclResponse.ProtoReflect.Descriptor instead.
func (*SetAclResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{39}
}

func (x *SetAclResponse) GetResponse() bool {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return false
}

type CreateBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketInfo *BucketInfo `protobuf:"bytes,1,req,name=bucketInfo" json:"bucketInfo,omitempty"`
}

func (x *CreateBucketRequest) Reset() {
	*x = CreateBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBucketRequest) ProtoMessage() {}

func (x *CreateBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBucketRequest.ProtoReflect.Descriptor instead.
func (*CreateBucketRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{40}
}

func (x *CreateBucketRequest) GetBucketInfo() *BucketInfo {
	if x != nil {
		return x.BucketInfo
	}
	return nil
}

type CreateBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateBucketResponse) Reset() {
	*x = CreateBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBucketResponse) ProtoMessage() {}

func (x *CreateBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBucketResponse.ProtoReflect.Descriptor instead.
func (*CreateBucketResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{41}
}

type InfoBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName *string `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName *string `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
}

func (x *InfoBucketRequest) Reset() {
	*x = InfoBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoBucketRequest) ProtoMessage() {}

func (x *InfoBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoBucketRequest.ProtoReflect.Descriptor instead.
func (*InfoBucketRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{42}
}

func (x *InfoBucketRequest) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *InfoBucketRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

type InfoBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketInfo *BucketInfo `protobuf:"bytes,2,opt,name=bucketInfo" json:"bucketInfo,omitempty"`
}

func (x *InfoBucketResponse) Reset() {
	*x = InfoBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoBucketResponse) ProtoMessage() {}

func (x *InfoBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoBucketResponse.ProtoReflect.Descriptor instead.
func (*InfoBucketResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{43}
}

func (x *InfoBucketResponse) GetBucketInfo() *BucketInfo {
	if x != nil {
		return x.BucketInfo
	}
	return nil
}

type SetBucketPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketArgs *BucketArgs `protobuf:"bytes,1,opt,name=bucketArgs" json:"bucketArgs,omitempty"`
}

func (x *SetBucketPropertyRequest) Reset() {
	*x = SetBucketPropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBucketPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBucketPropertyRequest) ProtoMessage() {}

func (x *SetBucketPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBucketPropertyRequest.ProtoReflect.Descriptor instead.
func (*SetBucketPropertyRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{44}
}

func (x *SetBucketPropertyRequest) GetBucketArgs() *BucketArgs {
	if x != nil {
		return x.BucketArgs
	}
	return nil
}

type SetBucketPropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBucketPropertyResponse) Reset() {
	*x = SetBucketPropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBucketPropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBucketPropertyResponse) ProtoMessage() {}

func (x *SetBucketPropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBucketPropertyResponse.ProtoReflect.Descriptor instead.
func (*SetBucketPropertyResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{45}
}

type DeleteBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName *string `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName *string `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
}

func (x *DeleteBucketRequest) Reset() {
	*x = DeleteBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBucketRequest) ProtoMessage() {}

func (x *DeleteBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBucketRequest.ProtoReflect.Descriptor instead.
func (*DeleteBucketRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteBucketRequest) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *DeleteBucketRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

type DeleteBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBucketResponse) Reset() {
	*x = DeleteBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBucketResponse) ProtoMessage() {}

func (x *DeleteBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBucketResponse.ProtoReflect.Descriptor instead.
func (*DeleteBucketResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{47}
}

type ListBucketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName *string `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	StartKey   *string `protobuf:"bytes,2,opt,name=startKey" json:"startKey,omitempty"`
	Prefix     *string `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
	Count      *int32  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (x *ListBucketsRequest) Reset() {
	*x = ListBucketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsRequest) ProtoMessage() {}

func (x *ListBucketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsRequest.ProtoReflect.Descriptor instead.
func (*ListBucketsRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{48}
}

func (x *ListBucketsRequest) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *ListBucketsRequest) GetStartKey() string {
	if x != nil && x.StartKey != nil {
		return *x.StartKey
	}
	return ""
}

func (x *ListBucketsRequest) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *ListBucketsRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ListBucketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketInfo []*BucketInfo `protobuf:"bytes,2,rep,name=bucketInfo" json:"bucketInfo,omitempty"`
}

func (x *ListBucketsResponse) Reset() {
	*x = ListBucketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBucketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsResponse) ProtoMessage() {}

func (x *ListBucketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsResponse.ProtoReflect.Descriptor instead.
func (*ListBucketsResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{49}
}

func (x *ListBucketsResponse) GetBucketInfo() []*BucketInfo {
	if x != nil {
		return x.BucketInfo
	}
	return nil
}

type KeyArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName        *string                 `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName        *string                 `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	KeyName           *string                 `protobuf:"bytes,3,req,name=keyName" json:"keyName,omitempty"`
	DataSize          *uint64                 `protobuf:"varint,4,opt,name=dataSize" json:"dataSize,omitempty"`
	Type              *hdds.ReplicationType   `protobuf:"varint,5,opt,name=type,enum=hadoop.hdds.ReplicationType" json:"type,omitempty"`
	Factor            *hdds.ReplicationFactor `protobuf:"varint,6,opt,name=factor,enum=hadoop.hdds.ReplicationFactor" json:"factor,omitempty"`
	KeyLocations      []*KeyLocation          `protobuf:"bytes,7,rep,name=keyLocations" json:"keyLocations,omitempty"`
	IsMultipartKey    *bool                   `protobuf:"varint,8,opt,name=isMultipartKey" json:"isMultipartKey,omitempty"`
	MultipartUploadID *string                 `protobuf:"bytes,9,opt,name=multipartUploadID" json:"multipartUploadID,omitempty"`
	MultipartNumber   *uint32                 `protobuf:"varint,10,opt,name=multipartNumber" json:"multipartNumber,omitempty"`
	Metadata          []*hdds.KeyValue        `protobuf:"bytes,11,rep,name=metadata" json:"metadata,omitempty"`
	Acls              []*OzoneAclInfo         `protobuf:"bytes,12,rep,name=acls" json:"acls,omitempty"`
	// This will be set when the request is received in pre-Execute. This
	// value is used in setting creation/modification time depending on the
	// request type.
	ModificationTime *uint64 `protobuf:"varint,13,opt,name=modificationTime" json:"modificationTime,omitempty"`
	SortDatanodes    *bool   `protobuf:"varint,14,opt,name=sortDatanodes" json:"sortDatanodes,omitempty"`
	// This will be set by leader OM in HA and update the original request.
	FileEncryptionInfo *FileEncryptionInfoProto `protobuf:"bytes,15,opt,name=fileEncryptionInfo" json:"fileEncryptionInfo,omitempty"`
}

func (x *KeyArgs) Reset() {
	*x = KeyArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyArgs) ProtoMessage() {}

func (x *KeyArgs) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyArgs.ProtoReflect.Descriptor instead.
func (*KeyArgs) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{50}
}

func (x *KeyArgs) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *KeyArgs) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *KeyArgs) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *KeyArgs) GetDataSize() uint64 {
	if x != nil && x.DataSize != nil {
		return *x.DataSize
	}
	return 0
}

func (x *KeyArgs) GetType() hdds.ReplicationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return hdds.ReplicationType_RATIS
}

func (x *KeyArgs) GetFactor() hdds.ReplicationFactor {
	if x != nil && x.Factor != nil {
		return *x.Factor
	}
	return hdds.ReplicationFactor_ONE
}

func (x *KeyArgs) GetKeyLocations() []*KeyLocation {
	if x != nil {
		return x.KeyLocations
	}
	return nil
}

func (x *KeyArgs) GetIsMultipartKey() bool {
	if x != nil && x.IsMultipartKey != nil {
		return *x.IsMultipartKey
	}
	return false
}

func (x *KeyArgs) GetMultipartUploadID() string {
	if x != nil && x.MultipartUploadID != nil {
		return *x.MultipartUploadID
	}
	return ""
}

func (x *KeyArgs) GetMultipartNumber() uint32 {
	if x != nil && x.MultipartNumber != nil {
		return *x.MultipartNumber
	}
	return 0
}

func (x *KeyArgs) GetMetadata() []*hdds.KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KeyArgs) GetAcls() []*OzoneAclInfo {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *KeyArgs) GetModificationTime() uint64 {
	if x != nil && x.ModificationTime != nil {
		return *x.ModificationTime
	}
	return 0
}

func (x *KeyArgs) GetSortDatanodes() bool {
	if x != nil && x.SortDatanodes != nil {
		return *x.SortDatanodes
	}
	return false
}

func (x *KeyArgs) GetFileEncryptionInfo() *FileEncryptionInfoProto {
	if x != nil {
		return x.FileEncryptionInfo
	}
	return nil
}

type KeyLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockID *hdds.BlockID `protobuf:"bytes,1,req,name=blockID" json:"blockID,omitempty"`
	Offset  *uint64       `protobuf:"varint,3,req,name=offset" json:"offset,omitempty"`
	Length  *uint64       `protobuf:"varint,4,req,name=length" json:"length,omitempty"`
	// indicated at which version this block gets created.
	CreateVersion *uint64            `protobuf:"varint,5,opt,name=createVersion" json:"createVersion,omitempty"`
	Token         *common.TokenProto `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	// Walk around to include pipeline info for client read/write
	// without talking to scm.
	// NOTE: the pipeline info may change after pipeline close.
	// So eventually, we will have to change back to call scm to
	// get the up to date pipeline information. This will need o3fs
	// provide not only a OM delegation token but also a SCM delegation token
	Pipeline *hdds.Pipeline `protobuf:"bytes,7,opt,name=pipeline" json:"pipeline,omitempty"`
}

func (x *KeyLocation) Reset() {
	*x = KeyLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyLocation) ProtoMessage() {}

func (x *KeyLocation) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyLocation.ProtoReflect.Descriptor instead.
func (*KeyLocation) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{51}
}

func (x *KeyLocation) GetBlockID() *hdds.BlockID {
	if x != nil {
		return x.BlockID
	}
	return nil
}

func (x *KeyLocation) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *KeyLocation) GetLength() uint64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *KeyLocation) GetCreateVersion() uint64 {
	if x != nil && x.CreateVersion != nil {
		return *x.CreateVersion
	}
	return 0
}

func (x *KeyLocation) GetToken() *common.TokenProto {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *KeyLocation) GetPipeline() *hdds.Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type KeyLocationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            *uint64                  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	KeyLocations       []*KeyLocation           `protobuf:"bytes,2,rep,name=keyLocations" json:"keyLocations,omitempty"`
	FileEncryptionInfo *FileEncryptionInfoProto `protobuf:"bytes,3,opt,name=fileEncryptionInfo" json:"fileEncryptionInfo,omitempty"`
}

func (x *KeyLocationList) Reset() {
	*x = KeyLocationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyLocationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyLocationList) ProtoMessage() {}

func (x *KeyLocationList) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyLocationList.ProtoReflect.Descriptor instead.
func (*KeyLocationList) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{52}
}

func (x *KeyLocationList) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *KeyLocationList) GetKeyLocations() []*KeyLocation {
	if x != nil {
		return x.KeyLocations
	}
	return nil
}

func (x *KeyLocationList) GetFileEncryptionInfo() *FileEncryptionInfoProto {
	if x != nil {
		return x.FileEncryptionInfo
	}
	return nil
}

type KeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName         *string                  `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName         *string                  `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	KeyName            *string                  `protobuf:"bytes,3,req,name=keyName" json:"keyName,omitempty"`
	DataSize           *uint64                  `protobuf:"varint,4,req,name=dataSize" json:"dataSize,omitempty"`
	Type               *hdds.ReplicationType    `protobuf:"varint,5,req,name=type,enum=hadoop.hdds.ReplicationType" json:"type,omitempty"`
	Factor             *hdds.ReplicationFactor  `protobuf:"varint,6,req,name=factor,enum=hadoop.hdds.ReplicationFactor" json:"factor,omitempty"`
	KeyLocationList    []*KeyLocationList       `protobuf:"bytes,7,rep,name=keyLocationList" json:"keyLocationList,omitempty"`
	CreationTime       *uint64                  `protobuf:"varint,8,req,name=creationTime" json:"creationTime,omitempty"`
	ModificationTime   *uint64                  `protobuf:"varint,9,req,name=modificationTime" json:"modificationTime,omitempty"`
	LatestVersion      *uint64                  `protobuf:"varint,10,opt,name=latestVersion" json:"latestVersion,omitempty"`
	Metadata           []*hdds.KeyValue         `protobuf:"bytes,11,rep,name=metadata" json:"metadata,omitempty"`
	FileEncryptionInfo *FileEncryptionInfoProto `protobuf:"bytes,12,opt,name=fileEncryptionInfo" json:"fileEncryptionInfo,omitempty"`
	Acls               []*OzoneAclInfo          `protobuf:"bytes,13,rep,name=acls" json:"acls,omitempty"`
	ObjectID           *uint64                  `protobuf:"varint,14,opt,name=objectID" json:"objectID,omitempty"`
	UpdateID           *uint64                  `protobuf:"varint,15,opt,name=updateID" json:"updateID,omitempty"`
}

func (x *KeyInfo) Reset() {
	*x = KeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyInfo) ProtoMessage() {}

func (x *KeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyInfo.ProtoReflect.Descriptor instead.
func (*KeyInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{53}
}

func (x *KeyInfo) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *KeyInfo) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *KeyInfo) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *KeyInfo) GetDataSize() uint64 {
	if x != nil && x.DataSize != nil {
		return *x.DataSize
	}
	return 0
}

func (x *KeyInfo) GetType() hdds.ReplicationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return hdds.ReplicationType_RATIS
}

func (x *KeyInfo) GetFactor() hdds.ReplicationFactor {
	if x != nil && x.Factor != nil {
		return *x.Factor
	}
	return hdds.ReplicationFactor_ONE
}

func (x *KeyInfo) GetKeyLocationList() []*KeyLocationList {
	if x != nil {
		return x.KeyLocationList
	}
	return nil
}

func (x *KeyInfo) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *KeyInfo) GetModificationTime() uint64 {
	if x != nil && x.ModificationTime != nil {
		return *x.ModificationTime
	}
	return 0
}

func (x *KeyInfo) GetLatestVersion() uint64 {
	if x != nil && x.LatestVersion != nil {
		return *x.LatestVersion
	}
	return 0
}

func (x *KeyInfo) GetMetadata() []*hdds.KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KeyInfo) GetFileEncryptionInfo() *FileEncryptionInfoProto {
	if x != nil {
		return x.FileEncryptionInfo
	}
	return nil
}

func (x *KeyInfo) GetAcls() []*OzoneAclInfo {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *KeyInfo) GetObjectID() uint64 {
	if x != nil && x.ObjectID != nil {
		return *x.ObjectID
	}
	return 0
}

func (x *KeyInfo) GetUpdateID() uint64 {
	if x != nil && x.UpdateID != nil {
		return *x.UpdateID
	}
	return 0
}

type RepeatedKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyInfo []*KeyInfo `protobuf:"bytes,1,rep,name=keyInfo" json:"keyInfo,omitempty"`
}

func (x *RepeatedKeyInfo) Reset() {
	*x = RepeatedKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedKeyInfo) ProtoMessage() {}

func (x *RepeatedKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedKeyInfo.ProtoReflect.Descriptor instead.
func (*RepeatedKeyInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{54}
}

func (x *RepeatedKeyInfo) GetKeyInfo() []*KeyInfo {
	if x != nil {
		return x.KeyInfo
	}
	return nil
}

type OzoneFileStatusProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyInfo     *KeyInfo `protobuf:"bytes,2,opt,name=keyInfo" json:"keyInfo,omitempty"`
	BlockSize   *uint64  `protobuf:"varint,3,opt,name=blockSize" json:"blockSize,omitempty"`
	IsDirectory *bool    `protobuf:"varint,4,opt,name=isDirectory" json:"isDirectory,omitempty"`
}

func (x *OzoneFileStatusProto) Reset() {
	*x = OzoneFileStatusProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OzoneFileStatusProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OzoneFileStatusProto) ProtoMessage() {}

func (x *OzoneFileStatusProto) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OzoneFileStatusProto.ProtoReflect.Descriptor instead.
func (*OzoneFileStatusProto) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{55}
}

func (x *OzoneFileStatusProto) GetKeyInfo() *KeyInfo {
	if x != nil {
		return x.KeyInfo
	}
	return nil
}

func (x *OzoneFileStatusProto) GetBlockSize() uint64 {
	if x != nil && x.BlockSize != nil {
		return *x.BlockSize
	}
	return 0
}

func (x *OzoneFileStatusProto) GetIsDirectory() bool {
	if x != nil && x.IsDirectory != nil {
		return *x.IsDirectory
	}
	return false
}

type GetFileStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
}

func (x *GetFileStatusRequest) Reset() {
	*x = GetFileStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileStatusRequest) ProtoMessage() {}

func (x *GetFileStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileStatusRequest.ProtoReflect.Descriptor instead.
func (*GetFileStatusRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{56}
}

func (x *GetFileStatusRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

type GetFileStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *OzoneFileStatusProto `protobuf:"bytes,1,req,name=status" json:"status,omitempty"`
}

func (x *GetFileStatusResponse) Reset() {
	*x = GetFileStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileStatusResponse) ProtoMessage() {}

func (x *GetFileStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileStatusResponse.ProtoReflect.Descriptor instead.
func (*GetFileStatusResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{57}
}

func (x *GetFileStatusResponse) GetStatus() *OzoneFileStatusProto {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
}

func (x *CreateDirectoryRequest) Reset() {
	*x = CreateDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryRequest) ProtoMessage() {}

func (x *CreateDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryRequest.ProtoReflect.Descriptor instead.
func (*CreateDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{58}
}

func (x *CreateDirectoryRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

type CreateDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDirectoryResponse) Reset() {
	*x = CreateDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryResponse) ProtoMessage() {}

func (x *CreateDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryResponse.ProtoReflect.Descriptor instead.
func (*CreateDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{59}
}

type CreateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs     *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
	IsRecursive *bool    `protobuf:"varint,2,req,name=isRecursive" json:"isRecursive,omitempty"`
	IsOverwrite *bool    `protobuf:"varint,3,req,name=isOverwrite" json:"isOverwrite,omitempty"`
	// Set in OM HA during preExecute step. This way all OM's use same ID in
	// OM HA.
	ClientID *uint64 `protobuf:"varint,4,opt,name=clientID" json:"clientID,omitempty"`
}

func (x *CreateFileRequest) Reset() {
	*x = CreateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileRequest) ProtoMessage() {}

func (x *CreateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileRequest.ProtoReflect.Descriptor instead.
func (*CreateFileRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{60}
}

func (x *CreateFileRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

func (x *CreateFileRequest) GetIsRecursive() bool {
	if x != nil && x.IsRecursive != nil {
		return *x.IsRecursive
	}
	return false
}

func (x *CreateFileRequest) GetIsOverwrite() bool {
	if x != nil && x.IsOverwrite != nil {
		return *x.IsOverwrite
	}
	return false
}

func (x *CreateFileRequest) GetClientID() uint64 {
	if x != nil && x.ClientID != nil {
		return *x.ClientID
	}
	return 0
}

type CreateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyInfo *KeyInfo `protobuf:"bytes,1,opt,name=keyInfo" json:"keyInfo,omitempty"`
	// clients' followup request may carry this ID for stateful operations
	// (similar to a cookie).
	ID          *uint64 `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	OpenVersion *uint64 `protobuf:"varint,3,opt,name=openVersion" json:"openVersion,omitempty"`
}

func (x *CreateFileResponse) Reset() {
	*x = CreateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileResponse) ProtoMessage() {}

func (x *CreateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileResponse.ProtoReflect.Descriptor instead.
func (*CreateFileResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{61}
}

func (x *CreateFileResponse) GetKeyInfo() *KeyInfo {
	if x != nil {
		return x.KeyInfo
	}
	return nil
}

func (x *CreateFileResponse) GetID() uint64 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *CreateFileResponse) GetOpenVersion() uint64 {
	if x != nil && x.OpenVersion != nil {
		return *x.OpenVersion
	}
	return 0
}

type LookupFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
}

func (x *LookupFileRequest) Reset() {
	*x = LookupFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupFileRequest) ProtoMessage() {}

func (x *LookupFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupFileRequest.ProtoReflect.Descriptor instead.
func (*LookupFileRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{62}
}

func (x *LookupFileRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

type LookupFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyInfo *KeyInfo `protobuf:"bytes,1,opt,name=keyInfo" json:"keyInfo,omitempty"`
}

func (x *LookupFileResponse) Reset() {
	*x = LookupFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupFileResponse) ProtoMessage() {}

func (x *LookupFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupFileResponse.ProtoReflect.Descriptor instead.
func (*LookupFileResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{63}
}

func (x *LookupFileResponse) GetKeyInfo() *KeyInfo {
	if x != nil {
		return x.KeyInfo
	}
	return nil
}

type ListStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs    *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
	Recursive  *bool    `protobuf:"varint,2,req,name=recursive" json:"recursive,omitempty"`
	StartKey   *string  `protobuf:"bytes,3,req,name=startKey" json:"startKey,omitempty"`
	NumEntries *uint64  `protobuf:"varint,4,req,name=numEntries" json:"numEntries,omitempty"`
}

func (x *ListStatusRequest) Reset() {
	*x = ListStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusRequest) ProtoMessage() {}

func (x *ListStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusRequest.ProtoReflect.Descriptor instead.
func (*ListStatusRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{64}
}

func (x *ListStatusRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

func (x *ListStatusRequest) GetRecursive() bool {
	if x != nil && x.Recursive != nil {
		return *x.Recursive
	}
	return false
}

func (x *ListStatusRequest) GetStartKey() string {
	if x != nil && x.StartKey != nil {
		return *x.StartKey
	}
	return ""
}

func (x *ListStatusRequest) GetNumEntries() uint64 {
	if x != nil && x.NumEntries != nil {
		return *x.NumEntries
	}
	return 0
}

type ListStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []*OzoneFileStatusProto `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty"`
}

func (x *ListStatusResponse) Reset() {
	*x = ListStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusResponse) ProtoMessage() {}

func (x *ListStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusResponse.ProtoReflect.Descriptor instead.
func (*ListStatusResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{65}
}

func (x *ListStatusResponse) GetStatuses() []*OzoneFileStatusProto {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type CreateKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
	// Set in OM HA during preExecute step. This way all OM's use same ID in
	// OM HA.
	ClientID *uint64 `protobuf:"varint,2,opt,name=clientID" json:"clientID,omitempty"`
}

func (x *CreateKeyRequest) Reset() {
	*x = CreateKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyRequest) ProtoMessage() {}

func (x *CreateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateKeyRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{66}
}

func (x *CreateKeyRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

func (x *CreateKeyRequest) GetClientID() uint64 {
	if x != nil && x.ClientID != nil {
		return *x.ClientID
	}
	return 0
}

type CreateKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyInfo *KeyInfo `protobuf:"bytes,2,opt,name=keyInfo" json:"keyInfo,omitempty"`
	// clients' followup request may carry this ID for stateful operations
	// (similar to a cookie).
	ID          *uint64 `protobuf:"varint,3,opt,name=ID" json:"ID,omitempty"`
	OpenVersion *uint64 `protobuf:"varint,4,opt,name=openVersion" json:"openVersion,omitempty"`
}

func (x *CreateKeyResponse) Reset() {
	*x = CreateKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyResponse) ProtoMessage() {}

func (x *CreateKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateKeyResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{67}
}

func (x *CreateKeyResponse) GetKeyInfo() *KeyInfo {
	if x != nil {
		return x.KeyInfo
	}
	return nil
}

func (x *CreateKeyResponse) GetID() uint64 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *CreateKeyResponse) GetOpenVersion() uint64 {
	if x != nil && x.OpenVersion != nil {
		return *x.OpenVersion
	}
	return 0
}

type LookupKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
}

func (x *LookupKeyRequest) Reset() {
	*x = LookupKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupKeyRequest) ProtoMessage() {}

func (x *LookupKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupKeyRequest.ProtoReflect.Descriptor instead.
func (*LookupKeyRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{68}
}

func (x *LookupKeyRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

type LookupKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyInfo *KeyInfo `protobuf:"bytes,2,opt,name=keyInfo" json:"keyInfo,omitempty"`
	// clients' followup request may carry this ID for stateful operations (similar
	// to a cookie).
	ID *uint64 `protobuf:"varint,3,opt,name=ID" json:"ID,omitempty"`
	// TODO : allow specifiying a particular version to read.
	OpenVersion *uint64 `protobuf:"varint,4,opt,name=openVersion" json:"openVersion,omitempty"`
}

func (x *LookupKeyResponse) Reset() {
	*x = LookupKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupKeyResponse) ProtoMessage() {}

func (x *LookupKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupKeyResponse.ProtoReflect.Descriptor instead.
func (*LookupKeyResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{69}
}

func (x *LookupKeyResponse) GetKeyInfo() *KeyInfo {
	if x != nil {
		return x.KeyInfo
	}
	return nil
}

func (x *LookupKeyResponse) GetID() uint64 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *LookupKeyResponse) GetOpenVersion() uint64 {
	if x != nil && x.OpenVersion != nil {
		return *x.OpenVersion
	}
	return 0
}

type RenameKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs   *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
	ToKeyName *string  `protobuf:"bytes,2,req,name=toKeyName" json:"toKeyName,omitempty"`
}

func (x *RenameKeyRequest) Reset() {
	*x = RenameKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameKeyRequest) ProtoMessage() {}

func (x *RenameKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameKeyRequest.ProtoReflect.Descriptor instead.
func (*RenameKeyRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{70}
}

func (x *RenameKeyRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

func (x *RenameKeyRequest) GetToKeyName() string {
	if x != nil && x.ToKeyName != nil {
		return *x.ToKeyName
	}
	return ""
}

type RenameKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RenameKeyResponse) Reset() {
	*x = RenameKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameKeyResponse) ProtoMessage() {}

func (x *RenameKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameKeyResponse.ProtoReflect.Descriptor instead.
func (*RenameKeyResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{71}
}

type DeleteKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
}

func (x *DeleteKeyRequest) Reset() {
	*x = DeleteKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyRequest) ProtoMessage() {}

func (x *DeleteKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeyRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteKeyRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

type DeleteKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteKeys *DeleteKeyArgs `protobuf:"bytes,1,opt,name=deleteKeys" json:"deleteKeys,omitempty"`
}

func (x *DeleteKeysRequest) Reset() {
	*x = DeleteKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeysRequest) ProtoMessage() {}

func (x *DeleteKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeysRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeysRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{73}
}

func (x *DeleteKeysRequest) GetDeleteKeys() *DeleteKeyArgs {
	if x != nil {
		return x.DeleteKeys
	}
	return nil
}

type DeleteKeyArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName *string  `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName *string  `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	Keys       []string `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
}

func (x *DeleteKeyArgs) Reset() {
	*x = DeleteKeyArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyArgs) ProtoMessage() {}

func (x *DeleteKeyArgs) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyArgs.ProtoReflect.Descriptor instead.
func (*DeleteKeyArgs) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteKeyArgs) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *DeleteKeyArgs) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *DeleteKeyArgs) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type DeleteKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnDeletedKeys *DeleteKeyArgs `protobuf:"bytes,1,opt,name=unDeletedKeys" json:"unDeletedKeys,omitempty"`
	Status        *bool          `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
}

func (x *DeleteKeysResponse) Reset() {
	*x = DeleteKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeysResponse) ProtoMessage() {}

func (x *DeleteKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeysResponse.ProtoReflect.Descriptor instead.
func (*DeleteKeysResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{75}
}

func (x *DeleteKeysResponse) GetUnDeletedKeys() *DeleteKeyArgs {
	if x != nil {
		return x.UnDeletedKeys
	}
	return nil
}

func (x *DeleteKeysResponse) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

type DeleteKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyInfo *KeyInfo `protobuf:"bytes,2,opt,name=keyInfo" json:"keyInfo,omitempty"`
	// clients' followup request may carry this ID for stateful operations
	// (similar to a cookie).
	ID          *uint64 `protobuf:"varint,3,opt,name=ID" json:"ID,omitempty"`
	OpenVersion *uint64 `protobuf:"varint,4,opt,name=openVersion" json:"openVersion,omitempty"`
}

func (x *DeleteKeyResponse) Reset() {
	*x = DeleteKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyResponse) ProtoMessage() {}

func (x *DeleteKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteKeyResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{76}
}

func (x *DeleteKeyResponse) GetKeyInfo() *KeyInfo {
	if x != nil {
		return x.KeyInfo
	}
	return nil
}

func (x *DeleteKeyResponse) GetID() uint64 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *DeleteKeyResponse) GetOpenVersion() uint64 {
	if x != nil && x.OpenVersion != nil {
		return *x.OpenVersion
	}
	return 0
}

type DeletedKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName *string  `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName *string  `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	Keys       []string `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
}

func (x *DeletedKeys) Reset() {
	*x = DeletedKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedKeys) ProtoMessage() {}

func (x *DeletedKeys) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedKeys.ProtoReflect.Descriptor instead.
func (*DeletedKeys) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{77}
}

func (x *DeletedKeys) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *DeletedKeys) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *DeletedKeys) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type PurgeKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedKeys []*DeletedKeys `protobuf:"bytes,1,rep,name=deletedKeys" json:"deletedKeys,omitempty"`
}

func (x *PurgeKeysRequest) Reset() {
	*x = PurgeKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeKeysRequest) ProtoMessage() {}

func (x *PurgeKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeKeysRequest.ProtoReflect.Descriptor instead.
func (*PurgeKeysRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{78}
}

func (x *PurgeKeysRequest) GetDeletedKeys() []*DeletedKeys {
	if x != nil {
		return x.DeletedKeys
	}
	return nil
}

type PurgeKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PurgeKeysResponse) Reset() {
	*x = PurgeKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeKeysResponse) ProtoMessage() {}

func (x *PurgeKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeKeysResponse.ProtoReflect.Descriptor instead.
func (*PurgeKeysResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{79}
}

type OMTokenProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *OMTokenProto_Type `protobuf:"varint,1,req,name=type,enum=hadoop.ozone.OMTokenProto_Type" json:"type,omitempty"`
	Version        *uint32            `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Owner          *string            `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	Renewer        *string            `protobuf:"bytes,4,opt,name=renewer" json:"renewer,omitempty"`
	RealUser       *string            `protobuf:"bytes,5,opt,name=realUser" json:"realUser,omitempty"`
	IssueDate      *uint64            `protobuf:"varint,6,opt,name=issueDate" json:"issueDate,omitempty"`
	MaxDate        *uint64            `protobuf:"varint,7,opt,name=maxDate" json:"maxDate,omitempty"`
	SequenceNumber *uint32            `protobuf:"varint,8,opt,name=sequenceNumber" json:"sequenceNumber,omitempty"`
	MasterKeyId    *uint32            `protobuf:"varint,9,opt,name=masterKeyId" json:"masterKeyId,omitempty"`
	ExpiryDate     *uint64            `protobuf:"varint,10,opt,name=expiryDate" json:"expiryDate,omitempty"`
	OmCertSerialId *string            `protobuf:"bytes,11,opt,name=omCertSerialId" json:"omCertSerialId,omitempty"`
	AccessKeyId    *string            `protobuf:"bytes,12,opt,name=accessKeyId" json:"accessKeyId,omitempty"`
	Signature      *string            `protobuf:"bytes,13,opt,name=signature" json:"signature,omitempty"`
	StrToSign      *string            `protobuf:"bytes,14,opt,name=strToSign" json:"strToSign,omitempty"`
	OmServiceId    *string            `protobuf:"bytes,15,opt,name=omServiceId" json:"omServiceId,omitempty"`
}

func (x *OMTokenProto) Reset() {
	*x = OMTokenProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OMTokenProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OMTokenProto) ProtoMessage() {}

func (x *OMTokenProto) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OMTokenProto.ProtoReflect.Descriptor instead.
func (*OMTokenProto) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{80}
}

func (x *OMTokenProto) GetType() OMTokenProto_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return OMTokenProto_DELEGATION_TOKEN
}

func (x *OMTokenProto) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *OMTokenProto) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *OMTokenProto) GetRenewer() string {
	if x != nil && x.Renewer != nil {
		return *x.Renewer
	}
	return ""
}

func (x *OMTokenProto) GetRealUser() string {
	if x != nil && x.RealUser != nil {
		return *x.RealUser
	}
	return ""
}

func (x *OMTokenProto) GetIssueDate() uint64 {
	if x != nil && x.IssueDate != nil {
		return *x.IssueDate
	}
	return 0
}

func (x *OMTokenProto) GetMaxDate() uint64 {
	if x != nil && x.MaxDate != nil {
		return *x.MaxDate
	}
	return 0
}

func (x *OMTokenProto) GetSequenceNumber() uint32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *OMTokenProto) GetMasterKeyId() uint32 {
	if x != nil && x.MasterKeyId != nil {
		return *x.MasterKeyId
	}
	return 0
}

func (x *OMTokenProto) GetExpiryDate() uint64 {
	if x != nil && x.ExpiryDate != nil {
		return *x.ExpiryDate
	}
	return 0
}

func (x *OMTokenProto) GetOmCertSerialId() string {
	if x != nil && x.OmCertSerialId != nil {
		return *x.OmCertSerialId
	}
	return ""
}

func (x *OMTokenProto) GetAccessKeyId() string {
	if x != nil && x.AccessKeyId != nil {
		return *x.AccessKeyId
	}
	return ""
}

func (x *OMTokenProto) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *OMTokenProto) GetStrToSign() string {
	if x != nil && x.StrToSign != nil {
		return *x.StrToSign
	}
	return ""
}

func (x *OMTokenProto) GetOmServiceId() string {
	if x != nil && x.OmServiceId != nil {
		return *x.OmServiceId
	}
	return ""
}

type SecretKeyProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId           *uint32 `protobuf:"varint,1,req,name=keyId" json:"keyId,omitempty"`
	ExpiryDate      *uint64 `protobuf:"varint,2,req,name=expiryDate" json:"expiryDate,omitempty"`
	PrivateKeyBytes []byte  `protobuf:"bytes,3,req,name=privateKeyBytes" json:"privateKeyBytes,omitempty"`
	PublicKeyBytes  []byte  `protobuf:"bytes,4,req,name=publicKeyBytes" json:"publicKeyBytes,omitempty"`
}

func (x *SecretKeyProto) Reset() {
	*x = SecretKeyProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretKeyProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretKeyProto) ProtoMessage() {}

func (x *SecretKeyProto) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretKeyProto.ProtoReflect.Descriptor instead.
func (*SecretKeyProto) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{81}
}

func (x *SecretKeyProto) GetKeyId() uint32 {
	if x != nil && x.KeyId != nil {
		return *x.KeyId
	}
	return 0
}

func (x *SecretKeyProto) GetExpiryDate() uint64 {
	if x != nil && x.ExpiryDate != nil {
		return *x.ExpiryDate
	}
	return 0
}

func (x *SecretKeyProto) GetPrivateKeyBytes() []byte {
	if x != nil {
		return x.PrivateKeyBytes
	}
	return nil
}

func (x *SecretKeyProto) GetPublicKeyBytes() []byte {
	if x != nil {
		return x.PublicKeyBytes
	}
	return nil
}

type ListKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName *string `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName *string `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	StartKey   *string `protobuf:"bytes,3,opt,name=startKey" json:"startKey,omitempty"`
	Prefix     *string `protobuf:"bytes,4,opt,name=prefix" json:"prefix,omitempty"`
	Count      *int32  `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
}

func (x *ListKeysRequest) Reset() {
	*x = ListKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysRequest) ProtoMessage() {}

func (x *ListKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysRequest.ProtoReflect.Descriptor instead.
func (*ListKeysRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{82}
}

func (x *ListKeysRequest) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *ListKeysRequest) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *ListKeysRequest) GetStartKey() string {
	if x != nil && x.StartKey != nil {
		return *x.StartKey
	}
	return ""
}

func (x *ListKeysRequest) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *ListKeysRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ListKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyInfo []*KeyInfo `protobuf:"bytes,2,rep,name=keyInfo" json:"keyInfo,omitempty"`
}

func (x *ListKeysResponse) Reset() {
	*x = ListKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKeysResponse) ProtoMessage() {}

func (x *ListKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKeysResponse.ProtoReflect.Descriptor instead.
func (*ListKeysResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{83}
}

func (x *ListKeysResponse) GetKeyInfo() []*KeyInfo {
	if x != nil {
		return x.KeyInfo
	}
	return nil
}

type CommitKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs  *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
	ClientID *uint64  `protobuf:"varint,2,req,name=clientID" json:"clientID,omitempty"`
}

func (x *CommitKeyRequest) Reset() {
	*x = CommitKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitKeyRequest) ProtoMessage() {}

func (x *CommitKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitKeyRequest.ProtoReflect.Descriptor instead.
func (*CommitKeyRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{84}
}

func (x *CommitKeyRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

func (x *CommitKeyRequest) GetClientID() uint64 {
	if x != nil && x.ClientID != nil {
		return *x.ClientID
	}
	return 0
}

type CommitKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitKeyResponse) Reset() {
	*x = CommitKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitKeyResponse) ProtoMessage() {}

func (x *CommitKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitKeyResponse.ProtoReflect.Descriptor instead.
func (*CommitKeyResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{85}
}

type AllocateBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs     *KeyArgs               `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
	ClientID    *uint64                `protobuf:"varint,2,req,name=clientID" json:"clientID,omitempty"`
	ExcludeList *hdds.ExcludeListProto `protobuf:"bytes,3,opt,name=excludeList" json:"excludeList,omitempty"`
	// During HA on one of the OM nodes, we allocate block and send the
	// AllocateBlockRequest with keyLocation set. If this is set, no need to
	// call scm again in OM Ratis applyTransaction just append it to DB.
	KeyLocation *KeyLocation `protobuf:"bytes,4,opt,name=keyLocation" json:"keyLocation,omitempty"`
}

func (x *AllocateBlockRequest) Reset() {
	*x = AllocateBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateBlockRequest) ProtoMessage() {}

func (x *AllocateBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateBlockRequest.ProtoReflect.Descriptor instead.
func (*AllocateBlockRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{86}
}

func (x *AllocateBlockRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

func (x *AllocateBlockRequest) GetClientID() uint64 {
	if x != nil && x.ClientID != nil {
		return *x.ClientID
	}
	return 0
}

func (x *AllocateBlockRequest) GetExcludeList() *hdds.ExcludeListProto {
	if x != nil {
		return x.ExcludeList
	}
	return nil
}

func (x *AllocateBlockRequest) GetKeyLocation() *KeyLocation {
	if x != nil {
		return x.KeyLocation
	}
	return nil
}

type AllocateBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyLocation *KeyLocation `protobuf:"bytes,2,opt,name=keyLocation" json:"keyLocation,omitempty"`
}

func (x *AllocateBlockResponse) Reset() {
	*x = AllocateBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocateBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocateBlockResponse) ProtoMessage() {}

func (x *AllocateBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocateBlockResponse.ProtoReflect.Descriptor instead.
func (*AllocateBlockResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{87}
}

func (x *AllocateBlockResponse) GetKeyLocation() *KeyLocation {
	if x != nil {
		return x.KeyLocation
	}
	return nil
}

type ServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServiceListRequest) Reset() {
	*x = ServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListRequest) ProtoMessage() {}

func (x *ServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListRequest.ProtoReflect.Descriptor instead.
func (*ServiceListRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{88}
}

type DBUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber *uint64 `protobuf:"varint,1,req,name=sequenceNumber" json:"sequenceNumber,omitempty"`
}

func (x *DBUpdatesRequest) Reset() {
	*x = DBUpdatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBUpdatesRequest) ProtoMessage() {}

func (x *DBUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBUpdatesRequest.ProtoReflect.Descriptor instead.
func (*DBUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{89}
}

func (x *DBUpdatesRequest) GetSequenceNumber() uint64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

type ServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceInfo []*ServiceInfo `protobuf:"bytes,2,rep,name=serviceInfo" json:"serviceInfo,omitempty"`
	// When security is enabled, return SCM CA certificate to Ozone client
	// to set up gRPC TLS for client to authenticate server(DN).
	CaCertificate *string `protobuf:"bytes,3,opt,name=caCertificate" json:"caCertificate,omitempty"`
}

func (x *ServiceListResponse) Reset() {
	*x = ServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListResponse) ProtoMessage() {}

func (x *ServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListResponse.ProtoReflect.Descriptor instead.
func (*ServiceListResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{90}
}

func (x *ServiceListResponse) GetServiceInfo() []*ServiceInfo {
	if x != nil {
		return x.ServiceInfo
	}
	return nil
}

func (x *ServiceListResponse) GetCaCertificate() string {
	if x != nil && x.CaCertificate != nil {
		return *x.CaCertificate
	}
	return ""
}

type DBUpdatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber *uint64  `protobuf:"varint,1,req,name=sequenceNumber" json:"sequenceNumber,omitempty"`
	Data           [][]byte `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (x *DBUpdatesResponse) Reset() {
	*x = DBUpdatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBUpdatesResponse) ProtoMessage() {}

func (x *DBUpdatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBUpdatesResponse.ProtoReflect.Descriptor instead.
func (*DBUpdatesResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{91}
}

func (x *DBUpdatesResponse) GetSequenceNumber() uint64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *DBUpdatesResponse) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ServicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *ServicePort_Type `protobuf:"varint,1,req,name=type,enum=hadoop.ozone.ServicePort_Type" json:"type,omitempty"`
	Value *uint32           `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
}

func (x *ServicePort) Reset() {
	*x = ServicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePort) ProtoMessage() {}

func (x *ServicePort) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePort.ProtoReflect.Descriptor instead.
func (*ServicePort) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{92}
}

func (x *ServicePort) GetType() ServicePort_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ServicePort_RPC
}

func (x *ServicePort) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type OMRoleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     *string `protobuf:"bytes,1,req,name=nodeId" json:"nodeId,omitempty"`
	ServerRole *string `protobuf:"bytes,2,req,name=serverRole" json:"serverRole,omitempty"`
}

func (x *OMRoleInfo) Reset() {
	*x = OMRoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OMRoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OMRoleInfo) ProtoMessage() {}

func (x *OMRoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OMRoleInfo.ProtoReflect.Descriptor instead.
func (*OMRoleInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{93}
}

func (x *OMRoleInfo) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *OMRoleInfo) GetServerRole() string {
	if x != nil && x.ServerRole != nil {
		return *x.ServerRole
	}
	return ""
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeType     *hdds.NodeType `protobuf:"varint,1,req,name=nodeType,enum=hadoop.hdds.NodeType" json:"nodeType,omitempty"`
	Hostname     *string        `protobuf:"bytes,2,req,name=hostname" json:"hostname,omitempty"`
	ServicePorts []*ServicePort `protobuf:"bytes,3,rep,name=servicePorts" json:"servicePorts,omitempty"`
	OmRole       *OMRoleInfo    `protobuf:"bytes,4,opt,name=omRole" json:"omRole,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{94}
}

func (x *ServiceInfo) GetNodeType() hdds.NodeType {
	if x != nil && x.NodeType != nil {
		return *x.NodeType
	}
	return hdds.NodeType_OM
}

func (x *ServiceInfo) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *ServiceInfo) GetServicePorts() []*ServicePort {
	if x != nil {
		return x.ServicePorts
	}
	return nil
}

func (x *ServiceInfo) GetOmRole() *OMRoleInfo {
	if x != nil {
		return x.OmRole
	}
	return nil
}

type MultipartInfoInitiateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
}

func (x *MultipartInfoInitiateRequest) Reset() {
	*x = MultipartInfoInitiateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartInfoInitiateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartInfoInitiateRequest) ProtoMessage() {}

func (x *MultipartInfoInitiateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartInfoInitiateRequest.ProtoReflect.Descriptor instead.
func (*MultipartInfoInitiateRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{95}
}

func (x *MultipartInfoInitiateRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

type MultipartInfoInitiateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName        *string `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName        *string `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	KeyName           *string `protobuf:"bytes,3,req,name=keyName" json:"keyName,omitempty"`
	MultipartUploadID *string `protobuf:"bytes,4,req,name=multipartUploadID" json:"multipartUploadID,omitempty"`
}

func (x *MultipartInfoInitiateResponse) Reset() {
	*x = MultipartInfoInitiateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartInfoInitiateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartInfoInitiateResponse) ProtoMessage() {}

func (x *MultipartInfoInitiateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartInfoInitiateResponse.ProtoReflect.Descriptor instead.
func (*MultipartInfoInitiateResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{96}
}

func (x *MultipartInfoInitiateResponse) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *MultipartInfoInitiateResponse) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *MultipartInfoInitiateResponse) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *MultipartInfoInitiateResponse) GetMultipartUploadID() string {
	if x != nil && x.MultipartUploadID != nil {
		return *x.MultipartUploadID
	}
	return ""
}

type MultipartKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadID        *string                 `protobuf:"bytes,1,req,name=uploadID" json:"uploadID,omitempty"`
	CreationTime    *uint64                 `protobuf:"varint,2,req,name=creationTime" json:"creationTime,omitempty"`
	Type            *hdds.ReplicationType   `protobuf:"varint,3,req,name=type,enum=hadoop.hdds.ReplicationType" json:"type,omitempty"`
	Factor          *hdds.ReplicationFactor `protobuf:"varint,4,req,name=factor,enum=hadoop.hdds.ReplicationFactor" json:"factor,omitempty"`
	PartKeyInfoList []*PartKeyInfo          `protobuf:"bytes,5,rep,name=partKeyInfoList" json:"partKeyInfoList,omitempty"`
	ObjectID        *uint64                 `protobuf:"varint,6,opt,name=objectID" json:"objectID,omitempty"`
	UpdateID        *uint64                 `protobuf:"varint,7,opt,name=updateID" json:"updateID,omitempty"`
}

func (x *MultipartKeyInfo) Reset() {
	*x = MultipartKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartKeyInfo) ProtoMessage() {}

func (x *MultipartKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartKeyInfo.ProtoReflect.Descriptor instead.
func (*MultipartKeyInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{97}
}

func (x *MultipartKeyInfo) GetUploadID() string {
	if x != nil && x.UploadID != nil {
		return *x.UploadID
	}
	return ""
}

func (x *MultipartKeyInfo) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *MultipartKeyInfo) GetType() hdds.ReplicationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return hdds.ReplicationType_RATIS
}

func (x *MultipartKeyInfo) GetFactor() hdds.ReplicationFactor {
	if x != nil && x.Factor != nil {
		return *x.Factor
	}
	return hdds.ReplicationFactor_ONE
}

func (x *MultipartKeyInfo) GetPartKeyInfoList() []*PartKeyInfo {
	if x != nil {
		return x.PartKeyInfoList
	}
	return nil
}

func (x *MultipartKeyInfo) GetObjectID() uint64 {
	if x != nil && x.ObjectID != nil {
		return *x.ObjectID
	}
	return 0
}

func (x *MultipartKeyInfo) GetUpdateID() uint64 {
	if x != nil && x.UpdateID != nil {
		return *x.UpdateID
	}
	return 0
}

type PartKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartName    *string  `protobuf:"bytes,1,req,name=partName" json:"partName,omitempty"`
	PartNumber  *uint32  `protobuf:"varint,2,req,name=partNumber" json:"partNumber,omitempty"`
	PartKeyInfo *KeyInfo `protobuf:"bytes,3,req,name=partKeyInfo" json:"partKeyInfo,omitempty"`
}

func (x *PartKeyInfo) Reset() {
	*x = PartKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartKeyInfo) ProtoMessage() {}

func (x *PartKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartKeyInfo.ProtoReflect.Descriptor instead.
func (*PartKeyInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{98}
}

func (x *PartKeyInfo) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *PartKeyInfo) GetPartNumber() uint32 {
	if x != nil && x.PartNumber != nil {
		return *x.PartNumber
	}
	return 0
}

func (x *PartKeyInfo) GetPartKeyInfo() *KeyInfo {
	if x != nil {
		return x.PartKeyInfo
	}
	return nil
}

type MultipartCommitUploadPartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs  *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
	ClientID *uint64  `protobuf:"varint,2,req,name=clientID" json:"clientID,omitempty"`
}

func (x *MultipartCommitUploadPartRequest) Reset() {
	*x = MultipartCommitUploadPartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartCommitUploadPartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartCommitUploadPartRequest) ProtoMessage() {}

func (x *MultipartCommitUploadPartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartCommitUploadPartRequest.ProtoReflect.Descriptor instead.
func (*MultipartCommitUploadPartRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{99}
}

func (x *MultipartCommitUploadPartRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

func (x *MultipartCommitUploadPartRequest) GetClientID() uint64 {
	if x != nil && x.ClientID != nil {
		return *x.ClientID
	}
	return 0
}

type MultipartCommitUploadPartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This one is returned as Etag for S3.
	PartName *string `protobuf:"bytes,1,opt,name=partName" json:"partName,omitempty"`
}

func (x *MultipartCommitUploadPartResponse) Reset() {
	*x = MultipartCommitUploadPartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartCommitUploadPartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartCommitUploadPartResponse) ProtoMessage() {}

func (x *MultipartCommitUploadPartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartCommitUploadPartResponse.ProtoReflect.Descriptor instead.
func (*MultipartCommitUploadPartResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{100}
}

func (x *MultipartCommitUploadPartResponse) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

type MultipartUploadCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs   *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
	PartsList []*Part  `protobuf:"bytes,2,rep,name=partsList" json:"partsList,omitempty"`
}

func (x *MultipartUploadCompleteRequest) Reset() {
	*x = MultipartUploadCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartUploadCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartUploadCompleteRequest) ProtoMessage() {}

func (x *MultipartUploadCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartUploadCompleteRequest.ProtoReflect.Descriptor instead.
func (*MultipartUploadCompleteRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{101}
}

func (x *MultipartUploadCompleteRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

func (x *MultipartUploadCompleteRequest) GetPartsList() []*Part {
	if x != nil {
		return x.PartsList
	}
	return nil
}

type MultipartUploadCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume *string `protobuf:"bytes,1,opt,name=volume" json:"volume,omitempty"`
	Bucket *string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	Key    *string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Hash   *string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"` // This will be used as etag for s3
}

func (x *MultipartUploadCompleteResponse) Reset() {
	*x = MultipartUploadCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartUploadCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartUploadCompleteResponse) ProtoMessage() {}

func (x *MultipartUploadCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartUploadCompleteResponse.ProtoReflect.Descriptor instead.
func (*MultipartUploadCompleteResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{102}
}

func (x *MultipartUploadCompleteResponse) GetVolume() string {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return ""
}

func (x *MultipartUploadCompleteResponse) GetBucket() string {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return ""
}

func (x *MultipartUploadCompleteResponse) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *MultipartUploadCompleteResponse) GetHash() string {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return ""
}

type Part struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber *uint32 `protobuf:"varint,1,req,name=partNumber" json:"partNumber,omitempty"`
	PartName   *string `protobuf:"bytes,2,req,name=partName" json:"partName,omitempty"`
}

func (x *Part) Reset() {
	*x = Part{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Part) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Part) ProtoMessage() {}

func (x *Part) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Part.ProtoReflect.Descriptor instead.
func (*Part) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{103}
}

func (x *Part) GetPartNumber() uint32 {
	if x != nil && x.PartNumber != nil {
		return *x.PartNumber
	}
	return 0
}

func (x *Part) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

type MultipartUploadAbortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArgs *KeyArgs `protobuf:"bytes,1,req,name=keyArgs" json:"keyArgs,omitempty"`
}

func (x *MultipartUploadAbortRequest) Reset() {
	*x = MultipartUploadAbortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartUploadAbortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartUploadAbortRequest) ProtoMessage() {}

func (x *MultipartUploadAbortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartUploadAbortRequest.ProtoReflect.Descriptor instead.
func (*MultipartUploadAbortRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{104}
}

func (x *MultipartUploadAbortRequest) GetKeyArgs() *KeyArgs {
	if x != nil {
		return x.KeyArgs
	}
	return nil
}

type MultipartUploadAbortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MultipartUploadAbortResponse) Reset() {
	*x = MultipartUploadAbortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartUploadAbortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartUploadAbortResponse) ProtoMessage() {}

func (x *MultipartUploadAbortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartUploadAbortResponse.ProtoReflect.Descriptor instead.
func (*MultipartUploadAbortResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{105}
}

type MultipartUploadListPartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume           *string `protobuf:"bytes,1,req,name=volume" json:"volume,omitempty"`
	Bucket           *string `protobuf:"bytes,2,req,name=bucket" json:"bucket,omitempty"`
	Key              *string `protobuf:"bytes,3,req,name=key" json:"key,omitempty"`
	UploadID         *string `protobuf:"bytes,4,req,name=uploadID" json:"uploadID,omitempty"`
	PartNumbermarker *uint32 `protobuf:"varint,5,opt,name=partNumbermarker" json:"partNumbermarker,omitempty"`
	MaxParts         *uint32 `protobuf:"varint,6,opt,name=maxParts" json:"maxParts,omitempty"`
}

func (x *MultipartUploadListPartsRequest) Reset() {
	*x = MultipartUploadListPartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartUploadListPartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartUploadListPartsRequest) ProtoMessage() {}

func (x *MultipartUploadListPartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartUploadListPartsRequest.ProtoReflect.Descriptor instead.
func (*MultipartUploadListPartsRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{106}
}

func (x *MultipartUploadListPartsRequest) GetVolume() string {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return ""
}

func (x *MultipartUploadListPartsRequest) GetBucket() string {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return ""
}

func (x *MultipartUploadListPartsRequest) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *MultipartUploadListPartsRequest) GetUploadID() string {
	if x != nil && x.UploadID != nil {
		return *x.UploadID
	}
	return ""
}

func (x *MultipartUploadListPartsRequest) GetPartNumbermarker() uint32 {
	if x != nil && x.PartNumbermarker != nil {
		return *x.PartNumbermarker
	}
	return 0
}

func (x *MultipartUploadListPartsRequest) GetMaxParts() uint32 {
	if x != nil && x.MaxParts != nil {
		return *x.MaxParts
	}
	return 0
}

type MultipartUploadListPartsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 *hdds.ReplicationType   `protobuf:"varint,2,opt,name=type,enum=hadoop.hdds.ReplicationType" json:"type,omitempty"`
	Factor               *hdds.ReplicationFactor `protobuf:"varint,3,opt,name=factor,enum=hadoop.hdds.ReplicationFactor" json:"factor,omitempty"`
	NextPartNumberMarker *uint32                 `protobuf:"varint,4,opt,name=nextPartNumberMarker" json:"nextPartNumberMarker,omitempty"`
	IsTruncated          *bool                   `protobuf:"varint,5,opt,name=isTruncated" json:"isTruncated,omitempty"`
	PartsList            []*PartInfo             `protobuf:"bytes,6,rep,name=partsList" json:"partsList,omitempty"`
}

func (x *MultipartUploadListPartsResponse) Reset() {
	*x = MultipartUploadListPartsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartUploadListPartsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartUploadListPartsResponse) ProtoMessage() {}

func (x *MultipartUploadListPartsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartUploadListPartsResponse.ProtoReflect.Descriptor instead.
func (*MultipartUploadListPartsResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{107}
}

func (x *MultipartUploadListPartsResponse) GetType() hdds.ReplicationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return hdds.ReplicationType_RATIS
}

func (x *MultipartUploadListPartsResponse) GetFactor() hdds.ReplicationFactor {
	if x != nil && x.Factor != nil {
		return *x.Factor
	}
	return hdds.ReplicationFactor_ONE
}

func (x *MultipartUploadListPartsResponse) GetNextPartNumberMarker() uint32 {
	if x != nil && x.NextPartNumberMarker != nil {
		return *x.NextPartNumberMarker
	}
	return 0
}

func (x *MultipartUploadListPartsResponse) GetIsTruncated() bool {
	if x != nil && x.IsTruncated != nil {
		return *x.IsTruncated
	}
	return false
}

func (x *MultipartUploadListPartsResponse) GetPartsList() []*PartInfo {
	if x != nil {
		return x.PartsList
	}
	return nil
}

type ListMultipartUploadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume *string `protobuf:"bytes,1,req,name=volume" json:"volume,omitempty"`
	Bucket *string `protobuf:"bytes,2,req,name=bucket" json:"bucket,omitempty"`
	Prefix *string `protobuf:"bytes,3,req,name=prefix" json:"prefix,omitempty"`
}

func (x *ListMultipartUploadsRequest) Reset() {
	*x = ListMultipartUploadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMultipartUploadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMultipartUploadsRequest) ProtoMessage() {}

func (x *ListMultipartUploadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMultipartUploadsRequest.ProtoReflect.Descriptor instead.
func (*ListMultipartUploadsRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{108}
}

func (x *ListMultipartUploadsRequest) GetVolume() string {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return ""
}

func (x *ListMultipartUploadsRequest) GetBucket() string {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return ""
}

func (x *ListMultipartUploadsRequest) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

type ListMultipartUploadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTruncated *bool                  `protobuf:"varint,1,opt,name=isTruncated" json:"isTruncated,omitempty"`
	UploadsList []*MultipartUploadInfo `protobuf:"bytes,2,rep,name=uploadsList" json:"uploadsList,omitempty"`
}

func (x *ListMultipartUploadsResponse) Reset() {
	*x = ListMultipartUploadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMultipartUploadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMultipartUploadsResponse) ProtoMessage() {}

func (x *ListMultipartUploadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMultipartUploadsResponse.ProtoReflect.Descriptor instead.
func (*ListMultipartUploadsResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{109}
}

func (x *ListMultipartUploadsResponse) GetIsTruncated() bool {
	if x != nil && x.IsTruncated != nil {
		return *x.IsTruncated
	}
	return false
}

func (x *ListMultipartUploadsResponse) GetUploadsList() []*MultipartUploadInfo {
	if x != nil {
		return x.UploadsList
	}
	return nil
}

type MultipartUploadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName   *string                 `protobuf:"bytes,1,req,name=volumeName" json:"volumeName,omitempty"`
	BucketName   *string                 `protobuf:"bytes,2,req,name=bucketName" json:"bucketName,omitempty"`
	KeyName      *string                 `protobuf:"bytes,3,req,name=keyName" json:"keyName,omitempty"`
	UploadId     *string                 `protobuf:"bytes,4,req,name=uploadId" json:"uploadId,omitempty"`
	CreationTime *uint64                 `protobuf:"varint,5,req,name=creationTime" json:"creationTime,omitempty"`
	Type         *hdds.ReplicationType   `protobuf:"varint,6,req,name=type,enum=hadoop.hdds.ReplicationType" json:"type,omitempty"`
	Factor       *hdds.ReplicationFactor `protobuf:"varint,7,req,name=factor,enum=hadoop.hdds.ReplicationFactor" json:"factor,omitempty"`
}

func (x *MultipartUploadInfo) Reset() {
	*x = MultipartUploadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipartUploadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipartUploadInfo) ProtoMessage() {}

func (x *MultipartUploadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipartUploadInfo.ProtoReflect.Descriptor instead.
func (*MultipartUploadInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{110}
}

func (x *MultipartUploadInfo) GetVolumeName() string {
	if x != nil && x.VolumeName != nil {
		return *x.VolumeName
	}
	return ""
}

func (x *MultipartUploadInfo) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *MultipartUploadInfo) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *MultipartUploadInfo) GetUploadId() string {
	if x != nil && x.UploadId != nil {
		return *x.UploadId
	}
	return ""
}

func (x *MultipartUploadInfo) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *MultipartUploadInfo) GetType() hdds.ReplicationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return hdds.ReplicationType_RATIS
}

func (x *MultipartUploadInfo) GetFactor() hdds.ReplicationFactor {
	if x != nil && x.Factor != nil {
		return *x.Factor
	}
	return hdds.ReplicationFactor_ONE
}

type PartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartNumber       *uint32 `protobuf:"varint,1,req,name=partNumber" json:"partNumber,omitempty"`
	PartName         *string `protobuf:"bytes,2,req,name=partName" json:"partName,omitempty"`
	ModificationTime *uint64 `protobuf:"varint,3,req,name=modificationTime" json:"modificationTime,omitempty"`
	Size             *uint64 `protobuf:"varint,4,req,name=size" json:"size,omitempty"`
}

func (x *PartInfo) Reset() {
	*x = PartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartInfo) ProtoMessage() {}

func (x *PartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartInfo.ProtoReflect.Descriptor instead.
func (*PartInfo) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{111}
}

func (x *PartInfo) GetPartNumber() uint32 {
	if x != nil && x.PartNumber != nil {
		return *x.PartNumber
	}
	return 0
}

func (x *PartInfo) GetPartName() string {
	if x != nil && x.PartName != nil {
		return *x.PartName
	}
	return ""
}

func (x *PartInfo) GetModificationTime() uint64 {
	if x != nil && x.ModificationTime != nil {
		return *x.ModificationTime
	}
	return 0
}

func (x *PartInfo) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type GetDelegationTokenResponseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.GetDelegationTokenResponseProto `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (x *GetDelegationTokenResponseProto) Reset() {
	*x = GetDelegationTokenResponseProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDelegationTokenResponseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelegationTokenResponseProto) ProtoMessage() {}

func (x *GetDelegationTokenResponseProto) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelegationTokenResponseProto.ProtoReflect.Descriptor instead.
func (*GetDelegationTokenResponseProto) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{112}
}

func (x *GetDelegationTokenResponseProto) GetResponse() *common.GetDelegationTokenResponseProto {
	if x != nil {
		return x.Response
	}
	return nil
}

type RenewDelegationTokenResponseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.RenewDelegationTokenResponseProto `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (x *RenewDelegationTokenResponseProto) Reset() {
	*x = RenewDelegationTokenResponseProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewDelegationTokenResponseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewDelegationTokenResponseProto) ProtoMessage() {}

func (x *RenewDelegationTokenResponseProto) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewDelegationTokenResponseProto.ProtoReflect.Descriptor instead.
func (*RenewDelegationTokenResponseProto) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{113}
}

func (x *RenewDelegationTokenResponseProto) GetResponse() *common.RenewDelegationTokenResponseProto {
	if x != nil {
		return x.Response
	}
	return nil
}

type CancelDelegationTokenResponseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *common.CancelDelegationTokenResponseProto `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (x *CancelDelegationTokenResponseProto) Reset() {
	*x = CancelDelegationTokenResponseProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelDelegationTokenResponseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDelegationTokenResponseProto) ProtoMessage() {}

func (x *CancelDelegationTokenResponseProto) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDelegationTokenResponseProto.ProtoReflect.Descriptor instead.
func (*CancelDelegationTokenResponseProto) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{114}
}

func (x *CancelDelegationTokenResponseProto) GetResponse() *common.CancelDelegationTokenResponseProto {
	if x != nil {
		return x.Response
	}
	return nil
}

type S3Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KerberosID *string `protobuf:"bytes,1,req,name=kerberosID" json:"kerberosID,omitempty"`
	AwsSecret  *string `protobuf:"bytes,2,req,name=awsSecret" json:"awsSecret,omitempty"`
}

func (x *S3Secret) Reset() {
	*x = S3Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Secret) ProtoMessage() {}

func (x *S3Secret) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Secret.ProtoReflect.Descriptor instead.
func (*S3Secret) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{115}
}

func (x *S3Secret) GetKerberosID() string {
	if x != nil && x.KerberosID != nil {
		return *x.KerberosID
	}
	return ""
}

func (x *S3Secret) GetAwsSecret() string {
	if x != nil && x.AwsSecret != nil {
		return *x.AwsSecret
	}
	return ""
}

type GetS3SecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KerberosID *string `protobuf:"bytes,1,req,name=kerberosID" json:"kerberosID,omitempty"`
}

func (x *GetS3SecretRequest) Reset() {
	*x = GetS3SecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetS3SecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetS3SecretRequest) ProtoMessage() {}

func (x *GetS3SecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetS3SecretRequest.ProtoReflect.Descriptor instead.
func (*GetS3SecretRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{116}
}

func (x *GetS3SecretRequest) GetKerberosID() string {
	if x != nil && x.KerberosID != nil {
		return *x.KerberosID
	}
	return ""
}

type GetS3SecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3Secret *S3Secret `protobuf:"bytes,2,req,name=s3Secret" json:"s3Secret,omitempty"`
}

func (x *GetS3SecretResponse) Reset() {
	*x = GetS3SecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetS3SecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetS3SecretResponse) ProtoMessage() {}

func (x *GetS3SecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetS3SecretResponse.ProtoReflect.Descriptor instead.
func (*GetS3SecretResponse) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{117}
}

func (x *GetS3SecretResponse) GetS3Secret() *S3Secret {
	if x != nil {
		return x.S3Secret
	}
	return nil
}

//*
//This will be used internally by OM to replicate S3 Secret across quorum of
//OM's.
type UpdateGetS3SecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KerberosID *string `protobuf:"bytes,1,req,name=kerberosID" json:"kerberosID,omitempty"`
	AwsSecret  *string `protobuf:"bytes,2,req,name=awsSecret" json:"awsSecret,omitempty"`
}

func (x *UpdateGetS3SecretRequest) Reset() {
	*x = UpdateGetS3SecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OmClientProtocol_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGetS3SecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGetS3SecretRequest) ProtoMessage() {}

func (x *UpdateGetS3SecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OmClientProtocol_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGetS3SecretRequest.ProtoReflect.Descriptor instead.
func (*UpdateGetS3SecretRequest) Descriptor() ([]byte, []int) {
	return file_OmClientProtocol_proto_rawDescGZIP(), []int{118}
}

func (x *UpdateGetS3SecretRequest) GetKerberosID() string {
	if x != nil && x.KerberosID != nil {
		return *x.KerberosID
	}
	return ""
}

func (x *UpdateGetS3SecretRequest) GetAwsSecret() string {
	if x != nil && x.AwsSecret != nil {
		return *x.AwsSecret
	}
	return ""
}

var File_OmClientProtocol_proto protoreflect.FileDescriptor

var file_OmClientProtocol_proto_rawDesc = []byte{
	0x0a, 0x16, 0x4f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x1a, 0x0a, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc8, 0x21, 0x0a, 0x09, 0x4f, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a,
	0x18, 0x73, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x73, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x62, 0x0a, 0x18, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x6c, 0x69, 0x73,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a,
	0x11, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x18,
	0x73, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x65,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x73, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x53, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x10, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0f, 0x6c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x14,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x1e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61,
	0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1c, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x1e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6b, 0x0a, 0x1b, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x1b, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50,
	0x0a, 0x12, 0x67, 0x65, 0x74, 0x53, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x33, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x67, 0x65,
	0x74, 0x53, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x77, 0x0a, 0x1f, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1f, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x64,
	0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x42, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x64, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x19, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x1b, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x1c, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x1c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a,
	0x1f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7f, 0x0a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x67, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5c, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x64,
	0x64, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d,
	0x61, 0x64, 0x64, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x65, 0x74,
	0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73,
	0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d,
	0x67, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x67, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x70, 0x75, 0x72, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74,
	0x53, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x6b, 0x0a, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x1b, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa9, 0x20,
	0x0a, 0x0a, 0x4f, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07,
	0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x4d, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x4d, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x19,
	0x73, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x19, 0x73, 0x65, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x19, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x19, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x69, 0x6e,
	0x66, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x14,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x19, 0x73, 0x65,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x13, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x11, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x1f, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x75, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6e, 0x0a, 0x1c, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x1c, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x53, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x13, 0x67, 0x65, 0x74, 0x53, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x64, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e,
	0x44, 0x42, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x11, 0x64, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x1a, 0x67, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x1c, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1d, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x1d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x15, 0x67, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x17, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x12, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12,
	0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x41, 0x63, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x41, 0x63,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x73,
	0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0e, 0x67, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x11, 0x70, 0x75, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x56, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x54, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x22, 0x9d, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x22, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a,
	0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e,
	0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x68, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a,
	0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x6d, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x1a, 0x67, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0x8b, 0x02, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x1b, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x1c, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x1c, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x16,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x22, 0xa8, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x37, 0x0a,
	0x19, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x6c, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x6c, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x11, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x12, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x35, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x4b, 0x65, 0x79, 0x73, 0x22, 0x46, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x53, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x53, 0x5f,
	0x42, 0x59, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x22, 0x4e, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbb, 0x04, 0x0a,
	0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x61,
	0x63, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x10, 0x69,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x69, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x46,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x3a, 0x04, 0x44, 0x49, 0x53, 0x4b, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a,
	0x06, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x19, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x15, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x02, 0x0a, 0x17, 0x46, 0x69, 0x6c,
	0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x15, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x76, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x7a, 0x4b, 0x65, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x10, 0x65, 0x7a, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x76, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x7a, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x65, 0x7a,
	0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbc,
	0x01, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xed, 0x01,
	0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x69, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a,
	0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73,
	0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0xfa, 0x01, 0x0a, 0x08,
	0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x62,
	0x6a, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x62, 0x6a,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x02, 0x53, 0x33, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x39, 0x0a,
	0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x56,
	0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55, 0x43, 0x4b, 0x45,
	0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x04, 0x22, 0x1e, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x02, 0x22, 0xbd, 0x02, 0x0a, 0x0c, 0x4f, 0x7a, 0x6f,
	0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x61, 0x63, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x3a, 0x06,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x22, 0x4c, 0x0a, 0x0c, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x22, 0x28,
	0x0a, 0x0d, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x22, 0x39, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6f, 0x62, 0x6a,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x03,
	0x6f, 0x62, 0x6a, 0x22, 0x40, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x61, 0x63, 0x6c, 0x73, 0x22, 0x67, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x41, 0x63, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x03, 0x6f, 0x62, 0x6a,
	0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f,
	0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0x2c,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x10,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f,
	0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63,
	0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0x2f, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x41, 0x63, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6f, 0x62,
	0x6a, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x52,
	0x03, 0x6f, 0x62, 0x6a, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x61,
	0x63, 0x6c, 0x22, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61,
	0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x11, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e,
	0x0a, 0x12, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54,
	0x0a, 0x18, 0x53, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x72, 0x67, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x55, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x7e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x4f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61,
	0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xb4, 0x05, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68,
	0x64, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a,
	0x0c, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2e, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f,
	0x6e, 0x65, 0x41, 0x63, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x55, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x4b, 0x65, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x31, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x55, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x61,
	0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9a, 0x05, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x68, 0x64, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61,
	0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64,
	0x73, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x61,
	0x63, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x41, 0x63,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x4f, 0x7a, 0x6f, 0x6e,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65,
	0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x47, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x22, 0x53, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x49, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x77, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x11, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61,
	0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x22, 0x45, 0x0a, 0x12, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e,
	0x65, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x41,
	0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61,
	0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x7a, 0x6f, 0x6e, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65,
	0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x76, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x10, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x22, 0x76, 0x0a, 0x11, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x61, 0x0a, 0x10, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x22, 0x50, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x63,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0x6f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0d, 0x75,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x76, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22,
	0x4f, 0x0a, 0x10, 0x50, 0x75, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x22, 0x13, 0x0a, 0x11, 0x50, 0x75, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x04, 0x0a, 0x0c, 0x4f, 0x4d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x4d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6e, 0x65, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6e, 0x65, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6d, 0x43,
	0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x54, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x72, 0x54, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x33, 0x41,
	0x55, 0x54, 0x48, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x43, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x01,
	0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x54, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6b, 0x65,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b,
	0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3a, 0x0a,
	0x10, 0x44, 0x42, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x13, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x22, 0x4f, 0x0a, 0x11, 0x44, 0x42, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2f,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x50, 0x43, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54,
	0x50, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x54, 0x49, 0x53, 0x10, 0x04, 0x22,
	0x44, 0x0a, 0x0a, 0x4f, 0x4d, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x6f, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x65, 0x2e, 0x4f, 0x4d, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6f,
	0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44,
	0x22, 0xb9, 0x02, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x43, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0x82, 0x01, 0x0a,
	0x0b, 0x50, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x6f, 0x0a, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0x3f, 0x0a, 0x21, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x1f, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x42, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x41, 0x72, 0x67, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x1f, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x22, 0x98, 0x02, 0x0a, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70,
	0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x32, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f,
	0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x22, 0x85, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x99, 0x02, 0x0a, 0x13, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x64,
	0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x68, 0x64, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0x6d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71,
	0x0a, 0x21, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x4c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x73, 0x0a, 0x22, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x64, 0x6f,
	0x6f, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x0a, 0x08, 0x53, 0x33, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x22, 0x34, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72,
	0x6f, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x62,
	0x65, 0x72, 0x6f, 0x73, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x33, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x08, 0x73, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x53,
	0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x08, 0x73, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0x58, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x53, 0x33,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0a, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2a, 0xb0, 0x06, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x10, 0x0c, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x10, 0x17, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x10,
	0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x10,
	0x1f, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x10, 0x20,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x10, 0x21, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x10, 0x22, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x10, 0x23, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x25, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x10, 0x26, 0x12, 0x1b,
	0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x2d, 0x12, 0x19, 0x0a, 0x15, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x10, 0x2e, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x10, 0x2f, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x30, 0x12, 0x0f, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x53, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x31, 0x12, 0x1c,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73, 0x10, 0x32, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x33, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x42, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x10, 0x35, 0x12, 0x16, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x10, 0x3d, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x3e, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x3f, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x46, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10,
	0x47, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10,
	0x48, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x10,
	0x49, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x4a, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x41, 0x63, 0x6c, 0x10, 0x4b, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x6c, 0x10, 0x4c, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x65, 0x74, 0x41, 0x63, 0x6c, 0x10, 0x4d, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x6c, 0x10, 0x4e, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x75, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x10, 0x51, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x10, 0x52, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x73, 0x68, 0x10, 0x5b, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x73, 0x68, 0x10, 0x5c, 0x2a, 0x80,
	0x0c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x4f, 0x4c, 0x55,
	0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x53, 0x10, 0x07, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x0b, 0x12, 0x11, 0x0a,
	0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0c,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0f, 0x12, 0x18, 0x0a,
	0x14, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11, 0x12,
	0x14, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x4d, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x4d, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x15, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x18, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50,
	0x41, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x19, 0x12, 0x22, 0x0a, 0x1e, 0x4e,
	0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x52, 0x54,
	0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1a, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x53, 0x10, 0x1c, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1d, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10,
	0x1e, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x50, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x1f, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x33, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x20, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x23, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x24, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x25, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x43, 0x4d, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x26, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x27, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x28, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55,
	0x49, 0x54, 0x45, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4b, 0x4d, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x2a, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x2b, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x2c, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x2d, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x2e, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x2f, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x30, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x31, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x32, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41, 0x54,
	0x49, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x34, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x43,
	0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x36, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x10, 0x37,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x38, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x4d, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x39, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x3a, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x5f,
	0x52, 0x4f, 0x4f, 0x54, 0x10, 0x3b, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x10, 0x3c, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x3d, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x3e, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x4f,
	0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x53, 0x10, 0x3f, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x40, 0x2a, 0x40, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x53, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x43, 0x48,
	0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x49, 0x53,
	0x4b, 0x10, 0x04, 0x2a, 0x36, 0x0a, 0x10, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x45, 0x53, 0x5f, 0x43, 0x54, 0x52, 0x5f,
	0x4e, 0x4f, 0x50, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x1a, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x53, 0x10, 0x02, 0x32, 0x59, 0x0a,
	0x13, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x4f, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x76, 0x0a, 0x26, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x68, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x1a, 0x4f, 0x7a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68,
	0x65, 0x2f, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0xa0, 0x01, 0x01,
}

var (
	file_OmClientProtocol_proto_rawDescOnce sync.Once
	file_OmClientProtocol_proto_rawDescData = file_OmClientProtocol_proto_rawDesc
)

func file_OmClientProtocol_proto_rawDescGZIP() []byte {
	file_OmClientProtocol_proto_rawDescOnce.Do(func() {
		file_OmClientProtocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_OmClientProtocol_proto_rawDescData)
	})
	return file_OmClientProtocol_proto_rawDescData
}

var file_OmClientProtocol_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_OmClientProtocol_proto_msgTypes = make([]protoimpl.MessageInfo, 119)
var file_OmClientProtocol_proto_goTypes = []interface{}{
	(Type)(0),                                         // 0: hadoop.ozone.Type
	(Status)(0),                                       // 1: hadoop.ozone.Status
	(StorageTypeProto)(0),                             // 2: hadoop.ozone.StorageTypeProto
	(CipherSuiteProto)(0),                             // 3: hadoop.ozone.CipherSuiteProto
	(CryptoProtocolVersionProto)(0),                   // 4: hadoop.ozone.CryptoProtocolVersionProto
	(ListVolumeRequest_Scope)(0),                      // 5: hadoop.ozone.ListVolumeRequest.Scope
	(OzoneObj_ObjectType)(0),                          // 6: hadoop.ozone.OzoneObj.ObjectType
	(OzoneObj_StoreType)(0),                           // 7: hadoop.ozone.OzoneObj.StoreType
	(OzoneAclInfo_OzoneAclType)(0),                    // 8: hadoop.ozone.OzoneAclInfo.OzoneAclType
	(OzoneAclInfo_OzoneAclScope)(0),                   // 9: hadoop.ozone.OzoneAclInfo.OzoneAclScope
	(OMTokenProto_Type)(0),                            // 10: hadoop.ozone.OMTokenProto.Type
	(ServicePort_Type)(0),                             // 11: hadoop.ozone.ServicePort.Type
	(*OMRequest)(nil),                                 // 12: hadoop.ozone.OMRequest
	(*OMResponse)(nil),                                // 13: hadoop.ozone.OMResponse
	(*ListTrashRequest)(nil),                          // 14: hadoop.ozone.ListTrashRequest
	(*ListTrashResponse)(nil),                         // 15: hadoop.ozone.ListTrashResponse
	(*RecoverTrashRequest)(nil),                       // 16: hadoop.ozone.RecoverTrashRequest
	(*RecoverTrashResponse)(nil),                      // 17: hadoop.ozone.RecoverTrashResponse
	(*VolumeInfo)(nil),                                // 18: hadoop.ozone.VolumeInfo
	(*UserInfo)(nil),                                  // 19: hadoop.ozone.UserInfo
	(*UpdateGetDelegationTokenRequest)(nil),           // 20: hadoop.ozone.UpdateGetDelegationTokenRequest
	(*UpdateRenewDelegationTokenRequest)(nil),         // 21: hadoop.ozone.UpdateRenewDelegationTokenRequest
	(*CreateVolumeRequest)(nil),                       // 22: hadoop.ozone.CreateVolumeRequest
	(*CreateVolumeResponse)(nil),                      // 23: hadoop.ozone.CreateVolumeResponse
	(*UserVolumeInfo)(nil),                            // 24: hadoop.ozone.UserVolumeInfo
	(*SetVolumePropertyRequest)(nil),                  // 25: hadoop.ozone.SetVolumePropertyRequest
	(*SetVolumePropertyResponse)(nil),                 // 26: hadoop.ozone.SetVolumePropertyResponse
	(*CheckVolumeAccessRequest)(nil),                  // 27: hadoop.ozone.CheckVolumeAccessRequest
	(*CheckVolumeAccessResponse)(nil),                 // 28: hadoop.ozone.CheckVolumeAccessResponse
	(*InfoVolumeRequest)(nil),                         // 29: hadoop.ozone.InfoVolumeRequest
	(*InfoVolumeResponse)(nil),                        // 30: hadoop.ozone.InfoVolumeResponse
	(*DeleteVolumeRequest)(nil),                       // 31: hadoop.ozone.DeleteVolumeRequest
	(*DeleteVolumeResponse)(nil),                      // 32: hadoop.ozone.DeleteVolumeResponse
	(*ListVolumeRequest)(nil),                         // 33: hadoop.ozone.ListVolumeRequest
	(*ListVolumeResponse)(nil),                        // 34: hadoop.ozone.ListVolumeResponse
	(*BucketInfo)(nil),                                // 35: hadoop.ozone.BucketInfo
	(*BucketEncryptionInfoProto)(nil),                 // 36: hadoop.ozone.BucketEncryptionInfoProto
	(*FileEncryptionInfoProto)(nil),                   // 37: hadoop.ozone.FileEncryptionInfoProto
	(*PerFileEncryptionInfoProto)(nil),                // 38: hadoop.ozone.PerFileEncryptionInfoProto
	(*DataEncryptionKeyProto)(nil),                    // 39: hadoop.ozone.DataEncryptionKeyProto
	(*BucketArgs)(nil),                                // 40: hadoop.ozone.BucketArgs
	(*PrefixInfo)(nil),                                // 41: hadoop.ozone.PrefixInfo
	(*OzoneObj)(nil),                                  // 42: hadoop.ozone.OzoneObj
	(*OzoneAclInfo)(nil),                              // 43: hadoop.ozone.OzoneAclInfo
	(*GetAclRequest)(nil),                             // 44: hadoop.ozone.GetAclRequest
	(*GetAclResponse)(nil),                            // 45: hadoop.ozone.GetAclResponse
	(*AddAclRequest)(nil),                             // 46: hadoop.ozone.AddAclRequest
	(*AddAclResponse)(nil),                            // 47: hadoop.ozone.AddAclResponse
	(*RemoveAclRequest)(nil),                          // 48: hadoop.ozone.RemoveAclRequest
	(*RemoveAclResponse)(nil),                         // 49: hadoop.ozone.RemoveAclResponse
	(*SetAclRequest)(nil),                             // 50: hadoop.ozone.SetAclRequest
	(*SetAclResponse)(nil),                            // 51: hadoop.ozone.SetAclResponse
	(*CreateBucketRequest)(nil),                       // 52: hadoop.ozone.CreateBucketRequest
	(*CreateBucketResponse)(nil),                      // 53: hadoop.ozone.CreateBucketResponse
	(*InfoBucketRequest)(nil),                         // 54: hadoop.ozone.InfoBucketRequest
	(*InfoBucketResponse)(nil),                        // 55: hadoop.ozone.InfoBucketResponse
	(*SetBucketPropertyRequest)(nil),                  // 56: hadoop.ozone.SetBucketPropertyRequest
	(*SetBucketPropertyResponse)(nil),                 // 57: hadoop.ozone.SetBucketPropertyResponse
	(*DeleteBucketRequest)(nil),                       // 58: hadoop.ozone.DeleteBucketRequest
	(*DeleteBucketResponse)(nil),                      // 59: hadoop.ozone.DeleteBucketResponse
	(*ListBucketsRequest)(nil),                        // 60: hadoop.ozone.ListBucketsRequest
	(*ListBucketsResponse)(nil),                       // 61: hadoop.ozone.ListBucketsResponse
	(*KeyArgs)(nil),                                   // 62: hadoop.ozone.KeyArgs
	(*KeyLocation)(nil),                               // 63: hadoop.ozone.KeyLocation
	(*KeyLocationList)(nil),                           // 64: hadoop.ozone.KeyLocationList
	(*KeyInfo)(nil),                                   // 65: hadoop.ozone.KeyInfo
	(*RepeatedKeyInfo)(nil),                           // 66: hadoop.ozone.RepeatedKeyInfo
	(*OzoneFileStatusProto)(nil),                      // 67: hadoop.ozone.OzoneFileStatusProto
	(*GetFileStatusRequest)(nil),                      // 68: hadoop.ozone.GetFileStatusRequest
	(*GetFileStatusResponse)(nil),                     // 69: hadoop.ozone.GetFileStatusResponse
	(*CreateDirectoryRequest)(nil),                    // 70: hadoop.ozone.CreateDirectoryRequest
	(*CreateDirectoryResponse)(nil),                   // 71: hadoop.ozone.CreateDirectoryResponse
	(*CreateFileRequest)(nil),                         // 72: hadoop.ozone.CreateFileRequest
	(*CreateFileResponse)(nil),                        // 73: hadoop.ozone.CreateFileResponse
	(*LookupFileRequest)(nil),                         // 74: hadoop.ozone.LookupFileRequest
	(*LookupFileResponse)(nil),                        // 75: hadoop.ozone.LookupFileResponse
	(*ListStatusRequest)(nil),                         // 76: hadoop.ozone.ListStatusRequest
	(*ListStatusResponse)(nil),                        // 77: hadoop.ozone.ListStatusResponse
	(*CreateKeyRequest)(nil),                          // 78: hadoop.ozone.CreateKeyRequest
	(*CreateKeyResponse)(nil),                         // 79: hadoop.ozone.CreateKeyResponse
	(*LookupKeyRequest)(nil),                          // 80: hadoop.ozone.LookupKeyRequest
	(*LookupKeyResponse)(nil),                         // 81: hadoop.ozone.LookupKeyResponse
	(*RenameKeyRequest)(nil),                          // 82: hadoop.ozone.RenameKeyRequest
	(*RenameKeyResponse)(nil),                         // 83: hadoop.ozone.RenameKeyResponse
	(*DeleteKeyRequest)(nil),                          // 84: hadoop.ozone.DeleteKeyRequest
	(*DeleteKeysRequest)(nil),                         // 85: hadoop.ozone.DeleteKeysRequest
	(*DeleteKeyArgs)(nil),                             // 86: hadoop.ozone.DeleteKeyArgs
	(*DeleteKeysResponse)(nil),                        // 87: hadoop.ozone.DeleteKeysResponse
	(*DeleteKeyResponse)(nil),                         // 88: hadoop.ozone.DeleteKeyResponse
	(*DeletedKeys)(nil),                               // 89: hadoop.ozone.DeletedKeys
	(*PurgeKeysRequest)(nil),                          // 90: hadoop.ozone.PurgeKeysRequest
	(*PurgeKeysResponse)(nil),                         // 91: hadoop.ozone.PurgeKeysResponse
	(*OMTokenProto)(nil),                              // 92: hadoop.ozone.OMTokenProto
	(*SecretKeyProto)(nil),                            // 93: hadoop.ozone.SecretKeyProto
	(*ListKeysRequest)(nil),                           // 94: hadoop.ozone.ListKeysRequest
	(*ListKeysResponse)(nil),                          // 95: hadoop.ozone.ListKeysResponse
	(*CommitKeyRequest)(nil),                          // 96: hadoop.ozone.CommitKeyRequest
	(*CommitKeyResponse)(nil),                         // 97: hadoop.ozone.CommitKeyResponse
	(*AllocateBlockRequest)(nil),                      // 98: hadoop.ozone.AllocateBlockRequest
	(*AllocateBlockResponse)(nil),                     // 99: hadoop.ozone.AllocateBlockResponse
	(*ServiceListRequest)(nil),                        // 100: hadoop.ozone.ServiceListRequest
	(*DBUpdatesRequest)(nil),                          // 101: hadoop.ozone.DBUpdatesRequest
	(*ServiceListResponse)(nil),                       // 102: hadoop.ozone.ServiceListResponse
	(*DBUpdatesResponse)(nil),                         // 103: hadoop.ozone.DBUpdatesResponse
	(*ServicePort)(nil),                               // 104: hadoop.ozone.ServicePort
	(*OMRoleInfo)(nil),                                // 105: hadoop.ozone.OMRoleInfo
	(*ServiceInfo)(nil),                               // 106: hadoop.ozone.ServiceInfo
	(*MultipartInfoInitiateRequest)(nil),              // 107: hadoop.ozone.MultipartInfoInitiateRequest
	(*MultipartInfoInitiateResponse)(nil),             // 108: hadoop.ozone.MultipartInfoInitiateResponse
	(*MultipartKeyInfo)(nil),                          // 109: hadoop.ozone.MultipartKeyInfo
	(*PartKeyInfo)(nil),                               // 110: hadoop.ozone.PartKeyInfo
	(*MultipartCommitUploadPartRequest)(nil),          // 111: hadoop.ozone.MultipartCommitUploadPartRequest
	(*MultipartCommitUploadPartResponse)(nil),         // 112: hadoop.ozone.MultipartCommitUploadPartResponse
	(*MultipartUploadCompleteRequest)(nil),            // 113: hadoop.ozone.MultipartUploadCompleteRequest
	(*MultipartUploadCompleteResponse)(nil),           // 114: hadoop.ozone.MultipartUploadCompleteResponse
	(*Part)(nil),                                      // 115: hadoop.ozone.Part
	(*MultipartUploadAbortRequest)(nil),               // 116: hadoop.ozone.MultipartUploadAbortRequest
	(*MultipartUploadAbortResponse)(nil),              // 117: hadoop.ozone.MultipartUploadAbortResponse
	(*MultipartUploadListPartsRequest)(nil),           // 118: hadoop.ozone.MultipartUploadListPartsRequest
	(*MultipartUploadListPartsResponse)(nil),          // 119: hadoop.ozone.MultipartUploadListPartsResponse
	(*ListMultipartUploadsRequest)(nil),               // 120: hadoop.ozone.ListMultipartUploadsRequest
	(*ListMultipartUploadsResponse)(nil),              // 121: hadoop.ozone.ListMultipartUploadsResponse
	(*MultipartUploadInfo)(nil),                       // 122: hadoop.ozone.MultipartUploadInfo
	(*PartInfo)(nil),                                  // 123: hadoop.ozone.PartInfo
	(*GetDelegationTokenResponseProto)(nil),           // 124: hadoop.ozone.GetDelegationTokenResponseProto
	(*RenewDelegationTokenResponseProto)(nil),         // 125: hadoop.ozone.RenewDelegationTokenResponseProto
	(*CancelDelegationTokenResponseProto)(nil),        // 126: hadoop.ozone.CancelDelegationTokenResponseProto
	(*S3Secret)(nil),                                  // 127: hadoop.ozone.S3Secret
	(*GetS3SecretRequest)(nil),                        // 128: hadoop.ozone.GetS3SecretRequest
	(*GetS3SecretResponse)(nil),                       // 129: hadoop.ozone.GetS3SecretResponse
	(*UpdateGetS3SecretRequest)(nil),                  // 130: hadoop.ozone.UpdateGetS3SecretRequest
	(*common.GetDelegationTokenRequestProto)(nil),     // 131: hadoop.common.GetDelegationTokenRequestProto
	(*common.RenewDelegationTokenRequestProto)(nil),   // 132: hadoop.common.RenewDelegationTokenRequestProto
	(*common.CancelDelegationTokenRequestProto)(nil),  // 133: hadoop.common.CancelDelegationTokenRequestProto
	(*hdds.KeyValue)(nil),                             // 134: hadoop.hdds.KeyValue
	(hdds.ReplicationType)(0),                         // 135: hadoop.hdds.ReplicationType
	(hdds.ReplicationFactor)(0),                       // 136: hadoop.hdds.ReplicationFactor
	(*hdds.BlockID)(nil),                              // 137: hadoop.hdds.BlockID
	(*common.TokenProto)(nil),                         // 138: hadoop.common.TokenProto
	(*hdds.Pipeline)(nil),                             // 139: hadoop.hdds.Pipeline
	(*hdds.ExcludeListProto)(nil),                     // 140: hadoop.hdds.ExcludeListProto
	(hdds.NodeType)(0),                                // 141: hadoop.hdds.NodeType
	(*common.GetDelegationTokenResponseProto)(nil),    // 142: hadoop.common.GetDelegationTokenResponseProto
	(*common.RenewDelegationTokenResponseProto)(nil),  // 143: hadoop.common.RenewDelegationTokenResponseProto
	(*common.CancelDelegationTokenResponseProto)(nil), // 144: hadoop.common.CancelDelegationTokenResponseProto
}
var file_OmClientProtocol_proto_depIdxs = []int32{
	0,   // 0: hadoop.ozone.OMRequest.cmdType:type_name -> hadoop.ozone.Type
	19,  // 1: hadoop.ozone.OMRequest.userInfo:type_name -> hadoop.ozone.UserInfo
	22,  // 2: hadoop.ozone.OMRequest.createVolumeRequest:type_name -> hadoop.ozone.CreateVolumeRequest
	25,  // 3: hadoop.ozone.OMRequest.setVolumePropertyRequest:type_name -> hadoop.ozone.SetVolumePropertyRequest
	27,  // 4: hadoop.ozone.OMRequest.checkVolumeAccessRequest:type_name -> hadoop.ozone.CheckVolumeAccessRequest
	29,  // 5: hadoop.ozone.OMRequest.infoVolumeRequest:type_name -> hadoop.ozone.InfoVolumeRequest
	31,  // 6: hadoop.ozone.OMRequest.deleteVolumeRequest:type_name -> hadoop.ozone.DeleteVolumeRequest
	33,  // 7: hadoop.ozone.OMRequest.listVolumeRequest:type_name -> hadoop.ozone.ListVolumeRequest
	52,  // 8: hadoop.ozone.OMRequest.createBucketRequest:type_name -> hadoop.ozone.CreateBucketRequest
	54,  // 9: hadoop.ozone.OMRequest.infoBucketRequest:type_name -> hadoop.ozone.InfoBucketRequest
	56,  // 10: hadoop.ozone.OMRequest.setBucketPropertyRequest:type_name -> hadoop.ozone.SetBucketPropertyRequest
	58,  // 11: hadoop.ozone.OMRequest.deleteBucketRequest:type_name -> hadoop.ozone.DeleteBucketRequest
	60,  // 12: hadoop.ozone.OMRequest.listBucketsRequest:type_name -> hadoop.ozone.ListBucketsRequest
	78,  // 13: hadoop.ozone.OMRequest.createKeyRequest:type_name -> hadoop.ozone.CreateKeyRequest
	80,  // 14: hadoop.ozone.OMRequest.lookupKeyRequest:type_name -> hadoop.ozone.LookupKeyRequest
	82,  // 15: hadoop.ozone.OMRequest.renameKeyRequest:type_name -> hadoop.ozone.RenameKeyRequest
	84,  // 16: hadoop.ozone.OMRequest.deleteKeyRequest:type_name -> hadoop.ozone.DeleteKeyRequest
	94,  // 17: hadoop.ozone.OMRequest.listKeysRequest:type_name -> hadoop.ozone.ListKeysRequest
	96,  // 18: hadoop.ozone.OMRequest.commitKeyRequest:type_name -> hadoop.ozone.CommitKeyRequest
	98,  // 19: hadoop.ozone.OMRequest.allocateBlockRequest:type_name -> hadoop.ozone.AllocateBlockRequest
	85,  // 20: hadoop.ozone.OMRequest.deleteKeysRequest:type_name -> hadoop.ozone.DeleteKeysRequest
	107, // 21: hadoop.ozone.OMRequest.initiateMultiPartUploadRequest:type_name -> hadoop.ozone.MultipartInfoInitiateRequest
	111, // 22: hadoop.ozone.OMRequest.commitMultiPartUploadRequest:type_name -> hadoop.ozone.MultipartCommitUploadPartRequest
	113, // 23: hadoop.ozone.OMRequest.completeMultiPartUploadRequest:type_name -> hadoop.ozone.MultipartUploadCompleteRequest
	116, // 24: hadoop.ozone.OMRequest.abortMultiPartUploadRequest:type_name -> hadoop.ozone.MultipartUploadAbortRequest
	128, // 25: hadoop.ozone.OMRequest.getS3SecretRequest:type_name -> hadoop.ozone.GetS3SecretRequest
	118, // 26: hadoop.ozone.OMRequest.listMultipartUploadPartsRequest:type_name -> hadoop.ozone.MultipartUploadListPartsRequest
	100, // 27: hadoop.ozone.OMRequest.serviceListRequest:type_name -> hadoop.ozone.ServiceListRequest
	101, // 28: hadoop.ozone.OMRequest.dbUpdatesRequest:type_name -> hadoop.ozone.DBUpdatesRequest
	131, // 29: hadoop.ozone.OMRequest.getDelegationTokenRequest:type_name -> hadoop.common.GetDelegationTokenRequestProto
	132, // 30: hadoop.ozone.OMRequest.renewDelegationTokenRequest:type_name -> hadoop.common.RenewDelegationTokenRequestProto
	133, // 31: hadoop.ozone.OMRequest.cancelDelegationTokenRequest:type_name -> hadoop.common.CancelDelegationTokenRequestProto
	20,  // 32: hadoop.ozone.OMRequest.updateGetDelegationTokenRequest:type_name -> hadoop.ozone.UpdateGetDelegationTokenRequest
	21,  // 33: hadoop.ozone.OMRequest.updatedRenewDelegationTokenRequest:type_name -> hadoop.ozone.UpdateRenewDelegationTokenRequest
	68,  // 34: hadoop.ozone.OMRequest.getFileStatusRequest:type_name -> hadoop.ozone.GetFileStatusRequest
	70,  // 35: hadoop.ozone.OMRequest.createDirectoryRequest:type_name -> hadoop.ozone.CreateDirectoryRequest
	72,  // 36: hadoop.ozone.OMRequest.createFileRequest:type_name -> hadoop.ozone.CreateFileRequest
	74,  // 37: hadoop.ozone.OMRequest.lookupFileRequest:type_name -> hadoop.ozone.LookupFileRequest
	76,  // 38: hadoop.ozone.OMRequest.listStatusRequest:type_name -> hadoop.ozone.ListStatusRequest
	46,  // 39: hadoop.ozone.OMRequest.addAclRequest:type_name -> hadoop.ozone.AddAclRequest
	48,  // 40: hadoop.ozone.OMRequest.removeAclRequest:type_name -> hadoop.ozone.RemoveAclRequest
	50,  // 41: hadoop.ozone.OMRequest.setAclRequest:type_name -> hadoop.ozone.SetAclRequest
	44,  // 42: hadoop.ozone.OMRequest.getAclRequest:type_name -> hadoop.ozone.GetAclRequest
	90,  // 43: hadoop.ozone.OMRequest.purgeKeysRequest:type_name -> hadoop.ozone.PurgeKeysRequest
	130, // 44: hadoop.ozone.OMRequest.updateGetS3SecretRequest:type_name -> hadoop.ozone.UpdateGetS3SecretRequest
	120, // 45: hadoop.ozone.OMRequest.listMultipartUploadsRequest:type_name -> hadoop.ozone.ListMultipartUploadsRequest
	14,  // 46: hadoop.ozone.OMRequest.listTrashRequest:type_name -> hadoop.ozone.ListTrashRequest
	16,  // 47: hadoop.ozone.OMRequest.RecoverTrashRequest:type_name -> hadoop.ozone.RecoverTrashRequest
	0,   // 48: hadoop.ozone.OMResponse.cmdType:type_name -> hadoop.ozone.Type
	1,   // 49: hadoop.ozone.OMResponse.status:type_name -> hadoop.ozone.Status
	23,  // 50: hadoop.ozone.OMResponse.createVolumeResponse:type_name -> hadoop.ozone.CreateVolumeResponse
	26,  // 51: hadoop.ozone.OMResponse.setVolumePropertyResponse:type_name -> hadoop.ozone.SetVolumePropertyResponse
	28,  // 52: hadoop.ozone.OMResponse.checkVolumeAccessResponse:type_name -> hadoop.ozone.CheckVolumeAccessResponse
	30,  // 53: hadoop.ozone.OMResponse.infoVolumeResponse:type_name -> hadoop.ozone.InfoVolumeResponse
	32,  // 54: hadoop.ozone.OMResponse.deleteVolumeResponse:type_name -> hadoop.ozone.DeleteVolumeResponse
	34,  // 55: hadoop.ozone.OMResponse.listVolumeResponse:type_name -> hadoop.ozone.ListVolumeResponse
	53,  // 56: hadoop.ozone.OMResponse.createBucketResponse:type_name -> hadoop.ozone.CreateBucketResponse
	55,  // 57: hadoop.ozone.OMResponse.infoBucketResponse:type_name -> hadoop.ozone.InfoBucketResponse
	57,  // 58: hadoop.ozone.OMResponse.setBucketPropertyResponse:type_name -> hadoop.ozone.SetBucketPropertyResponse
	59,  // 59: hadoop.ozone.OMResponse.deleteBucketResponse:type_name -> hadoop.ozone.DeleteBucketResponse
	61,  // 60: hadoop.ozone.OMResponse.listBucketsResponse:type_name -> hadoop.ozone.ListBucketsResponse
	79,  // 61: hadoop.ozone.OMResponse.createKeyResponse:type_name -> hadoop.ozone.CreateKeyResponse
	81,  // 62: hadoop.ozone.OMResponse.lookupKeyResponse:type_name -> hadoop.ozone.LookupKeyResponse
	83,  // 63: hadoop.ozone.OMResponse.renameKeyResponse:type_name -> hadoop.ozone.RenameKeyResponse
	88,  // 64: hadoop.ozone.OMResponse.deleteKeyResponse:type_name -> hadoop.ozone.DeleteKeyResponse
	95,  // 65: hadoop.ozone.OMResponse.listKeysResponse:type_name -> hadoop.ozone.ListKeysResponse
	97,  // 66: hadoop.ozone.OMResponse.commitKeyResponse:type_name -> hadoop.ozone.CommitKeyResponse
	99,  // 67: hadoop.ozone.OMResponse.allocateBlockResponse:type_name -> hadoop.ozone.AllocateBlockResponse
	87,  // 68: hadoop.ozone.OMResponse.deleteKeysResponse:type_name -> hadoop.ozone.DeleteKeysResponse
	108, // 69: hadoop.ozone.OMResponse.initiateMultiPartUploadResponse:type_name -> hadoop.ozone.MultipartInfoInitiateResponse
	112, // 70: hadoop.ozone.OMResponse.commitMultiPartUploadResponse:type_name -> hadoop.ozone.MultipartCommitUploadPartResponse
	114, // 71: hadoop.ozone.OMResponse.completeMultiPartUploadResponse:type_name -> hadoop.ozone.MultipartUploadCompleteResponse
	117, // 72: hadoop.ozone.OMResponse.abortMultiPartUploadResponse:type_name -> hadoop.ozone.MultipartUploadAbortResponse
	129, // 73: hadoop.ozone.OMResponse.getS3SecretResponse:type_name -> hadoop.ozone.GetS3SecretResponse
	119, // 74: hadoop.ozone.OMResponse.listMultipartUploadPartsResponse:type_name -> hadoop.ozone.MultipartUploadListPartsResponse
	102, // 75: hadoop.ozone.OMResponse.ServiceListResponse:type_name -> hadoop.ozone.ServiceListResponse
	103, // 76: hadoop.ozone.OMResponse.dbUpdatesResponse:type_name -> hadoop.ozone.DBUpdatesResponse
	124, // 77: hadoop.ozone.OMResponse.getDelegationTokenResponse:type_name -> hadoop.ozone.GetDelegationTokenResponseProto
	125, // 78: hadoop.ozone.OMResponse.renewDelegationTokenResponse:type_name -> hadoop.ozone.RenewDelegationTokenResponseProto
	126, // 79: hadoop.ozone.OMResponse.cancelDelegationTokenResponse:type_name -> hadoop.ozone.CancelDelegationTokenResponseProto
	69,  // 80: hadoop.ozone.OMResponse.getFileStatusResponse:type_name -> hadoop.ozone.GetFileStatusResponse
	71,  // 81: hadoop.ozone.OMResponse.createDirectoryResponse:type_name -> hadoop.ozone.CreateDirectoryResponse
	73,  // 82: hadoop.ozone.OMResponse.createFileResponse:type_name -> hadoop.ozone.CreateFileResponse
	75,  // 83: hadoop.ozone.OMResponse.lookupFileResponse:type_name -> hadoop.ozone.LookupFileResponse
	77,  // 84: hadoop.ozone.OMResponse.listStatusResponse:type_name -> hadoop.ozone.ListStatusResponse
	47,  // 85: hadoop.ozone.OMResponse.addAclResponse:type_name -> hadoop.ozone.AddAclResponse
	49,  // 86: hadoop.ozone.OMResponse.removeAclResponse:type_name -> hadoop.ozone.RemoveAclResponse
	51,  // 87: hadoop.ozone.OMResponse.setAclResponse:type_name -> hadoop.ozone.SetAclResponse
	45,  // 88: hadoop.ozone.OMResponse.getAclResponse:type_name -> hadoop.ozone.GetAclResponse
	91,  // 89: hadoop.ozone.OMResponse.purgeKeysResponse:type_name -> hadoop.ozone.PurgeKeysResponse
	121, // 90: hadoop.ozone.OMResponse.listMultipartUploadsResponse:type_name -> hadoop.ozone.ListMultipartUploadsResponse
	15,  // 91: hadoop.ozone.OMResponse.listTrashResponse:type_name -> hadoop.ozone.ListTrashResponse
	17,  // 92: hadoop.ozone.OMResponse.RecoverTrashResponse:type_name -> hadoop.ozone.RecoverTrashResponse
	66,  // 93: hadoop.ozone.ListTrashResponse.deletedKeys:type_name -> hadoop.ozone.RepeatedKeyInfo
	134, // 94: hadoop.ozone.VolumeInfo.metadata:type_name -> hadoop.hdds.KeyValue
	43,  // 95: hadoop.ozone.VolumeInfo.volumeAcls:type_name -> hadoop.ozone.OzoneAclInfo
	124, // 96: hadoop.ozone.UpdateGetDelegationTokenRequest.getDelegationTokenResponse:type_name -> hadoop.ozone.GetDelegationTokenResponseProto
	132, // 97: hadoop.ozone.UpdateRenewDelegationTokenRequest.renewDelegationTokenRequest:type_name -> hadoop.common.RenewDelegationTokenRequestProto
	125, // 98: hadoop.ozone.UpdateRenewDelegationTokenRequest.renewDelegationTokenResponse:type_name -> hadoop.ozone.RenewDelegationTokenResponseProto
	18,  // 99: hadoop.ozone.CreateVolumeRequest.volumeInfo:type_name -> hadoop.ozone.VolumeInfo
	43,  // 100: hadoop.ozone.CheckVolumeAccessRequest.userAcl:type_name -> hadoop.ozone.OzoneAclInfo
	18,  // 101: hadoop.ozone.InfoVolumeResponse.volumeInfo:type_name -> hadoop.ozone.VolumeInfo
	5,   // 102: hadoop.ozone.ListVolumeRequest.scope:type_name -> hadoop.ozone.ListVolumeRequest.Scope
	18,  // 103: hadoop.ozone.ListVolumeResponse.volumeInfo:type_name -> hadoop.ozone.VolumeInfo
	43,  // 104: hadoop.ozone.BucketInfo.acls:type_name -> hadoop.ozone.OzoneAclInfo
	2,   // 105: hadoop.ozone.BucketInfo.storageType:type_name -> hadoop.ozone.StorageTypeProto
	134, // 106: hadoop.ozone.BucketInfo.metadata:type_name -> hadoop.hdds.KeyValue
	36,  // 107: hadoop.ozone.BucketInfo.beinfo:type_name -> hadoop.ozone.BucketEncryptionInfoProto
	3,   // 108: hadoop.ozone.BucketEncryptionInfoProto.suite:type_name -> hadoop.ozone.CipherSuiteProto
	4,   // 109: hadoop.ozone.BucketEncryptionInfoProto.cryptoProtocolVersion:type_name -> hadoop.ozone.CryptoProtocolVersionProto
	3,   // 110: hadoop.ozone.FileEncryptionInfoProto.suite:type_name -> hadoop.ozone.CipherSuiteProto
	4,   // 111: hadoop.ozone.FileEncryptionInfoProto.cryptoProtocolVersion:type_name -> hadoop.ozone.CryptoProtocolVersionProto
	2,   // 112: hadoop.ozone.BucketArgs.storageType:type_name -> hadoop.ozone.StorageTypeProto
	134, // 113: hadoop.ozone.BucketArgs.metadata:type_name -> hadoop.hdds.KeyValue
	43,  // 114: hadoop.ozone.PrefixInfo.acls:type_name -> hadoop.ozone.OzoneAclInfo
	134, // 115: hadoop.ozone.PrefixInfo.metadata:type_name -> hadoop.hdds.KeyValue
	6,   // 116: hadoop.ozone.OzoneObj.resType:type_name -> hadoop.ozone.OzoneObj.ObjectType
	7,   // 117: hadoop.ozone.OzoneObj.storeType:type_name -> hadoop.ozone.OzoneObj.StoreType
	8,   // 118: hadoop.ozone.OzoneAclInfo.type:type_name -> hadoop.ozone.OzoneAclInfo.OzoneAclType
	9,   // 119: hadoop.ozone.OzoneAclInfo.aclScope:type_name -> hadoop.ozone.OzoneAclInfo.OzoneAclScope
	42,  // 120: hadoop.ozone.GetAclRequest.obj:type_name -> hadoop.ozone.OzoneObj
	43,  // 121: hadoop.ozone.GetAclResponse.acls:type_name -> hadoop.ozone.OzoneAclInfo
	42,  // 122: hadoop.ozone.AddAclRequest.obj:type_name -> hadoop.ozone.OzoneObj
	43,  // 123: hadoop.ozone.AddAclRequest.acl:type_name -> hadoop.ozone.OzoneAclInfo
	42,  // 124: hadoop.ozone.RemoveAclRequest.obj:type_name -> hadoop.ozone.OzoneObj
	43,  // 125: hadoop.ozone.RemoveAclRequest.acl:type_name -> hadoop.ozone.OzoneAclInfo
	42,  // 126: hadoop.ozone.SetAclRequest.obj:type_name -> hadoop.ozone.OzoneObj
	43,  // 127: hadoop.ozone.SetAclRequest.acl:type_name -> hadoop.ozone.OzoneAclInfo
	35,  // 128: hadoop.ozone.CreateBucketRequest.bucketInfo:type_name -> hadoop.ozone.BucketInfo
	35,  // 129: hadoop.ozone.InfoBucketResponse.bucketInfo:type_name -> hadoop.ozone.BucketInfo
	40,  // 130: hadoop.ozone.SetBucketPropertyRequest.bucketArgs:type_name -> hadoop.ozone.BucketArgs
	35,  // 131: hadoop.ozone.ListBucketsResponse.bucketInfo:type_name -> hadoop.ozone.BucketInfo
	135, // 132: hadoop.ozone.KeyArgs.type:type_name -> hadoop.hdds.ReplicationType
	136, // 133: hadoop.ozone.KeyArgs.factor:type_name -> hadoop.hdds.ReplicationFactor
	63,  // 134: hadoop.ozone.KeyArgs.keyLocations:type_name -> hadoop.ozone.KeyLocation
	134, // 135: hadoop.ozone.KeyArgs.metadata:type_name -> hadoop.hdds.KeyValue
	43,  // 136: hadoop.ozone.KeyArgs.acls:type_name -> hadoop.ozone.OzoneAclInfo
	37,  // 137: hadoop.ozone.KeyArgs.fileEncryptionInfo:type_name -> hadoop.ozone.FileEncryptionInfoProto
	137, // 138: hadoop.ozone.KeyLocation.blockID:type_name -> hadoop.hdds.BlockID
	138, // 139: hadoop.ozone.KeyLocation.token:type_name -> hadoop.common.TokenProto
	139, // 140: hadoop.ozone.KeyLocation.pipeline:type_name -> hadoop.hdds.Pipeline
	63,  // 141: hadoop.ozone.KeyLocationList.keyLocations:type_name -> hadoop.ozone.KeyLocation
	37,  // 142: hadoop.ozone.KeyLocationList.fileEncryptionInfo:type_name -> hadoop.ozone.FileEncryptionInfoProto
	135, // 143: hadoop.ozone.KeyInfo.type:type_name -> hadoop.hdds.ReplicationType
	136, // 144: hadoop.ozone.KeyInfo.factor:type_name -> hadoop.hdds.ReplicationFactor
	64,  // 145: hadoop.ozone.KeyInfo.keyLocationList:type_name -> hadoop.ozone.KeyLocationList
	134, // 146: hadoop.ozone.KeyInfo.metadata:type_name -> hadoop.hdds.KeyValue
	37,  // 147: hadoop.ozone.KeyInfo.fileEncryptionInfo:type_name -> hadoop.ozone.FileEncryptionInfoProto
	43,  // 148: hadoop.ozone.KeyInfo.acls:type_name -> hadoop.ozone.OzoneAclInfo
	65,  // 149: hadoop.ozone.RepeatedKeyInfo.keyInfo:type_name -> hadoop.ozone.KeyInfo
	65,  // 150: hadoop.ozone.OzoneFileStatusProto.keyInfo:type_name -> hadoop.ozone.KeyInfo
	62,  // 151: hadoop.ozone.GetFileStatusRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	67,  // 152: hadoop.ozone.GetFileStatusResponse.status:type_name -> hadoop.ozone.OzoneFileStatusProto
	62,  // 153: hadoop.ozone.CreateDirectoryRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	62,  // 154: hadoop.ozone.CreateFileRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	65,  // 155: hadoop.ozone.CreateFileResponse.keyInfo:type_name -> hadoop.ozone.KeyInfo
	62,  // 156: hadoop.ozone.LookupFileRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	65,  // 157: hadoop.ozone.LookupFileResponse.keyInfo:type_name -> hadoop.ozone.KeyInfo
	62,  // 158: hadoop.ozone.ListStatusRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	67,  // 159: hadoop.ozone.ListStatusResponse.statuses:type_name -> hadoop.ozone.OzoneFileStatusProto
	62,  // 160: hadoop.ozone.CreateKeyRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	65,  // 161: hadoop.ozone.CreateKeyResponse.keyInfo:type_name -> hadoop.ozone.KeyInfo
	62,  // 162: hadoop.ozone.LookupKeyRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	65,  // 163: hadoop.ozone.LookupKeyResponse.keyInfo:type_name -> hadoop.ozone.KeyInfo
	62,  // 164: hadoop.ozone.RenameKeyRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	62,  // 165: hadoop.ozone.DeleteKeyRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	86,  // 166: hadoop.ozone.DeleteKeysRequest.deleteKeys:type_name -> hadoop.ozone.DeleteKeyArgs
	86,  // 167: hadoop.ozone.DeleteKeysResponse.unDeletedKeys:type_name -> hadoop.ozone.DeleteKeyArgs
	65,  // 168: hadoop.ozone.DeleteKeyResponse.keyInfo:type_name -> hadoop.ozone.KeyInfo
	89,  // 169: hadoop.ozone.PurgeKeysRequest.deletedKeys:type_name -> hadoop.ozone.DeletedKeys
	10,  // 170: hadoop.ozone.OMTokenProto.type:type_name -> hadoop.ozone.OMTokenProto.Type
	65,  // 171: hadoop.ozone.ListKeysResponse.keyInfo:type_name -> hadoop.ozone.KeyInfo
	62,  // 172: hadoop.ozone.CommitKeyRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	62,  // 173: hadoop.ozone.AllocateBlockRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	140, // 174: hadoop.ozone.AllocateBlockRequest.excludeList:type_name -> hadoop.hdds.ExcludeListProto
	63,  // 175: hadoop.ozone.AllocateBlockRequest.keyLocation:type_name -> hadoop.ozone.KeyLocation
	63,  // 176: hadoop.ozone.AllocateBlockResponse.keyLocation:type_name -> hadoop.ozone.KeyLocation
	106, // 177: hadoop.ozone.ServiceListResponse.serviceInfo:type_name -> hadoop.ozone.ServiceInfo
	11,  // 178: hadoop.ozone.ServicePort.type:type_name -> hadoop.ozone.ServicePort.Type
	141, // 179: hadoop.ozone.ServiceInfo.nodeType:type_name -> hadoop.hdds.NodeType
	104, // 180: hadoop.ozone.ServiceInfo.servicePorts:type_name -> hadoop.ozone.ServicePort
	105, // 181: hadoop.ozone.ServiceInfo.omRole:type_name -> hadoop.ozone.OMRoleInfo
	62,  // 182: hadoop.ozone.MultipartInfoInitiateRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	135, // 183: hadoop.ozone.MultipartKeyInfo.type:type_name -> hadoop.hdds.ReplicationType
	136, // 184: hadoop.ozone.MultipartKeyInfo.factor:type_name -> hadoop.hdds.ReplicationFactor
	110, // 185: hadoop.ozone.MultipartKeyInfo.partKeyInfoList:type_name -> hadoop.ozone.PartKeyInfo
	65,  // 186: hadoop.ozone.PartKeyInfo.partKeyInfo:type_name -> hadoop.ozone.KeyInfo
	62,  // 187: hadoop.ozone.MultipartCommitUploadPartRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	62,  // 188: hadoop.ozone.MultipartUploadCompleteRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	115, // 189: hadoop.ozone.MultipartUploadCompleteRequest.partsList:type_name -> hadoop.ozone.Part
	62,  // 190: hadoop.ozone.MultipartUploadAbortRequest.keyArgs:type_name -> hadoop.ozone.KeyArgs
	135, // 191: hadoop.ozone.MultipartUploadListPartsResponse.type:type_name -> hadoop.hdds.ReplicationType
	136, // 192: hadoop.ozone.MultipartUploadListPartsResponse.factor:type_name -> hadoop.hdds.ReplicationFactor
	123, // 193: hadoop.ozone.MultipartUploadListPartsResponse.partsList:type_name -> hadoop.ozone.PartInfo
	122, // 194: hadoop.ozone.ListMultipartUploadsResponse.uploadsList:type_name -> hadoop.ozone.MultipartUploadInfo
	135, // 195: hadoop.ozone.MultipartUploadInfo.type:type_name -> hadoop.hdds.ReplicationType
	136, // 196: hadoop.ozone.MultipartUploadInfo.factor:type_name -> hadoop.hdds.ReplicationFactor
	142, // 197: hadoop.ozone.GetDelegationTokenResponseProto.response:type_name -> hadoop.common.GetDelegationTokenResponseProto
	143, // 198: hadoop.ozone.RenewDelegationTokenResponseProto.response:type_name -> hadoop.common.RenewDelegationTokenResponseProto
	144, // 199: hadoop.ozone.CancelDelegationTokenResponseProto.response:type_name -> hadoop.common.CancelDelegationTokenResponseProto
	127, // 200: hadoop.ozone.GetS3SecretResponse.s3Secret:type_name -> hadoop.ozone.S3Secret
	12,  // 201: hadoop.ozone.OzoneManagerService.submitRequest:input_type -> hadoop.ozone.OMRequest
	13,  // 202: hadoop.ozone.OzoneManagerService.submitRequest:output_type -> hadoop.ozone.OMResponse
	202, // [202:203] is the sub-list for method output_type
	201, // [201:202] is the sub-list for method input_type
	201, // [201:201] is the sub-list for extension type_name
	201, // [201:201] is the sub-list for extension extendee
	0,   // [0:201] is the sub-list for field type_name
}

func init() { file_OmClientProtocol_proto_init() }
func file_OmClientProtocol_proto_init() {
	if File_OmClientProtocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_OmClientProtocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverTrashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoverTrashResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGetDelegationTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRenewDelegationTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVolumePropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVolumePropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckVolumeAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckVolumeAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketEncryptionInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileEncryptionInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerFileEncryptionInfoProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataEncryptionKeyProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OzoneObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OzoneAclInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAclRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAclResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAclRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAclResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAclRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAclResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAclRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAclResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBucketPropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBucketPropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBucketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyLocationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OzoneFileStatusProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OMTokenProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretKeyProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocateBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBUpdatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBUpdatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OMRoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartInfoInitiateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartInfoInitiateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartCommitUploadPartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartCommitUploadPartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartUploadCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartUploadCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Part); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartUploadAbortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartUploadAbortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartUploadListPartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartUploadListPartsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMultipartUploadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMultipartUploadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipartUploadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDelegationTokenResponseProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewDelegationTokenResponseProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelDelegationTokenResponseProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetS3SecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetS3SecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OmClientProtocol_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGetS3SecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_OmClientProtocol_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   119,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_OmClientProtocol_proto_goTypes,
		DependencyIndexes: file_OmClientProtocol_proto_depIdxs,
		EnumInfos:         file_OmClientProtocol_proto_enumTypes,
		MessageInfos:      file_OmClientProtocol_proto_msgTypes,
	}.Build()
	File_OmClientProtocol_proto = out.File
	file_OmClientProtocol_proto_rawDesc = nil
	file_OmClientProtocol_proto_goTypes = nil
	file_OmClientProtocol_proto_depIdxs = nil
}
